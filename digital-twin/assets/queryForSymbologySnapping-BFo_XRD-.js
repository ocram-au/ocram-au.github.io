import{ar as v,jK as O,jL as P,o as D,b_ as q,bS as E,jM as G,jN as N,ay as A,jO as B,jP as H,d2 as J}from"./index-QRcEofMq.js";async function L(t,d,l,p,o){const{elevationProvider:u,renderCoordsHelper:i}=t,{elevationInfo:f}=d,{pointsInFeatures:j,spatialReference:g}=p,h=v.fromJSON(g),y=O(f,!0),I=await P(y,h,o);D(o);const c=[],e=new Set,s=new Set,a=new E,n=q(0,0,0,v.WGS84),r=new H,w=A();n.spatialReference=h;const $=t.elevationProvider.spatialReference??t.spatialReference;for(const{objectId:S,points:R}of j){const b=l(S);if(b==null){for(const m of R)c.push(m.z??0);e.add(S);continue}b.isDraped&&s.add(S);const z=b.graphic.geometry;a.setFromElevationInfo(G(z,f)),a.updateFeatureExpressionInfoContext(I,b.graphic,d);for(const{x:m,y:C,z:F}of R)n.x=m,n.y=C,n.z=F??0,await N(n,w,$,0,{signal:o}),B(w,u,a,i,r),c.push(r.z)}return{elevations:c,drapedObjectIds:s,failedObjectIds:e}}async function M(t,d,l){if(t==null||d.candidates.length===0)return x;const p=t.graphics3DGraphicsByObjectID??t.graphics3DGraphics,o=[],u=[],{renderer:i}=t,f=i!=null&&"arcadeRequired"in i&&i.arcadeRequired?J():null,j=async(e,{graphic:s,graphics3DSymbol:a})=>{const n=await f,r=await t.getRenderingInfoAsync(s,i,n,{signal:l});return r==null?[]:a.queryForSnapping(e,h,r,l)},{candidates:g,spatialReference:h}=d;for(let e=0;e<g.length;++e){const s=g[e],{objectId:a}=s,n=typeof a=="number"?p==null?void 0:p.get(a):void 0;if(n==null)continue;const{graphics3DSymbol:r}=n;r.symbologySnappingSupported&&(o.push(j(s,n)),u.push(e))}if(o.length===0)return x;const y=await Promise.all(o);D(l);const I=[],c=[];for(let e=0;e<y.length;++e){const s=y[e],a=u[e];for(const n of s)I.push(n),c.push(a)}return{candidates:I,sourceCandidateIndices:c}}const x={candidates:[],sourceCandidateIndices:[]};export{L as l,M as r};
