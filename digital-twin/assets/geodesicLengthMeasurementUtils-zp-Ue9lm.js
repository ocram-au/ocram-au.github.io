import{aP as c,ay as i,e3 as a,e4 as f,e5 as m,e6 as p}from"./index-BGUxYM9l.js";import{geodesicLength as o}from"./geometryEngine-DEWZpdAD.js";import{r as u}from"./geodesicMeasurementUtils-B81j5QVG.js";function $(e){const{spatialReference:n}=e;return u(n,h,d,e)}function b(e,n){if(!c(e.spatialReference,n.spatialReference))return null;const{spatialReference:r}=e;return t[0]=e.x,t[1]=e.y,t[2]=e.hasZ?e.z:0,s[0]=n.x,s[1]=n.y,s[2]=n.hasZ?n.z:0,l(t,s,r)}function l(e,n,r){return u(r,R,y,e,n,r)}function R(e,n,r){return a(m(x,e,n,r).distance,"meters")}function y(e,n,r){return a(o(g(e,n,r),"meters"),"meters")}function h(e){return a(f([e],"meters")[0],"meters")}function d(e){return a(o(e,"meters"),"meters")}function g(e,n,r){return{type:"polyline",spatialReference:r,paths:[[[...e],[...n]]]}}const x=new p,t=i(),s=i();export{b as f,$ as m,l as u};
