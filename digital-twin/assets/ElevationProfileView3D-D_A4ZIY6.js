import{f as $,aH as v,l as D,o as H,nD as R,bp as b,nG as P,e as h,iR as L,iv as T,g as k,iw as f,jZ as O,T as V,nE as j,A as d,r as c,m as w,a as M,mG as G,u,nF as y}from"./index-Bmji7YKu.js";import{t as I,a as S}from"./visualizationUtils-BAGTh0cU.js";import{j as A}from"./settings-7enHr8t5.js";import{j as E,e as C}from"./GraphicState-CrHeo4a0.js";import"./ExtendedLineVisualElement-enh38FVB.js";import"./EngineVisualElement-BkraNdiV.js";import"./VisualElement-CSTEZTPY.js";import"./LaserlinePath.glsl-cxLhztzg.js";import"./lineStippleUtils-C89mzWlO.js";import"./line-CcCVXHgM.js";import"./line-CC4gTKyK.js";let x=class{constructor(e){this._params=e,this._highlightTask=null,this._highlightHandle=null,this._visualElementHandle=null,this._settings=new A({getTheme:()=>this._params.view.effectiveTheme})}destroy(){this.remove()}remove(){this._highlightTask=$(this._highlightTask),this._highlightHandle=v(this._highlightHandle),this._visualElementHandle=v(this._visualElementHandle)}showHighlight(e){if(this.remove(),e==null||!m(e))return;const i=e.layer;this._highlightTask=D(async t=>{const s=await this._params.view.whenLayerView(i);H(t),R(s)&&(this._highlightHandle=s.highlight(e))})}showReshaping(e){if(this.remove(),e==null)return;const i=this._params.view,t=new E({view:i,geometry:m(e)?e.geometry:null,attached:!1,elevationInfo:P(e),renderOccluded:b.OccludeAndTransparentStencil,isDecoration:!0}),s=new C({graphic:e}),a=[h(()=>s.isDraped,l=>{t.isDraped=l}),s.on("changed",()=>{t.geometry=m(e)?e.geometry:null}),i.trackGraphicState(s),i.maskOccludee(e),L(t)];this._settings.visualElements.lineObjects.outline.apply(t),t.attached=!0,this._visualElementHandle=T(a)}};function m(n){return n.geometry!=null&&n.geometry.type==="polyline"}let p=class extends k{constructor(n){super(n),this._chartData=null,this._visualElements=[],this._update=e=>{const{chartData:i}=e;if(i==null)return this.remove();if(!i.refined)return;const t=this._visualElements,s=i.lines.filter(r=>r.viewVisualizationEnabled),a=s.length;for(;t.length>a;)t.pop().destroy();const l=f().profileLinesStyle3D;for(;t.length<a;){const r=new E({view:this.view,elevationInfo:{mode:"absolute-height",offset:0},innerWidth:l.innerWidth,innerColor:l.innerColor,width:l.width,falloff:l.falloff,renderOccluded:l.renderOccluded,isDecoration:!0});t.push(r)}const o=e.spatialReference;for(let r=0;r<a;++r){const g=t[r],_=s[a-1-r];g.geometry=I(_,o),g.color=O(V.toUnitRGBA(_.color))}}}initialize(){const n=f().profileLinesUpdateThrottleMillis;let e=this._update;{const i=j(this._update,n);this.addHandles(i),e=i}this.addHandles([h(()=>({spatialReference:this.view.spatialReference,chartData:this._chartData}),e,d)])}destroy(){this._destroyVisualElements()}remove(){this._destroyVisualElements()}update(n){this._chartData=n}_destroyVisualElements(){this._visualElements.forEach(n=>n.destroy()),this._visualElements.length=0}};c([w()],p.prototype,"view",void 0),c([w()],p.prototype,"_chartData",void 0),p=c([M("esri.widgets.ElevationProfile.support.ProfileLines3D")],p);class Y{constructor(e,i){this._handles=new G,this._inputRepresentation=new x({view:e}),this._hoveredPoints=new S({view:e}),this._profileLines=new p({view:e}),this._handles.add([h(()=>i.viewModel.hoveredPoints,t=>this._hoveredPoints.update(t),d),h(()=>{const{state:t,editable:s,highlightEnabled:a,viewModel:l}=i,o=l.input;return o&&(o.commitProperty("geometry"),o.commitProperty("layer")),{input:o,state:t,editable:s,highlightEnabled:a}},t=>this._updateInputRepresentation(t),d),h(()=>i.viewModel.chartData,t=>this._profileLines.update(t),d),h(()=>{var t;return(t=i.viewModel.input)==null?void 0:t.geometry},()=>{this._profileLines.remove()},d)])}destroy(){this._handles=u(this._handles),this._inputRepresentation=u(this._inputRepresentation),this._hoveredPoints=u(this._hoveredPoints),this._profileLines=u(this._profileLines)}_updateInputRepresentation({input:e,state:i,editable:t,highlightEnabled:s}){const a=this._inputRepresentation;if(!s)return a.remove();i===y.Selected?a.showHighlight(e):i!==y.Created||t?a.remove():a.showReshaping(e)}}export{Y as ElevationProfileView3D};
