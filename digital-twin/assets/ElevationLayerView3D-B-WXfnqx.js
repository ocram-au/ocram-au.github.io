import{m as u,t as m,M as f,A as d,B as p,C as g,e as n,y as h,a as v}from"./index-gzUUFRQO.js";import{s as w,a as $}from"./LercDecoder--S5CXw5E.js";import{l as D}from"./LayerView3D-CSTXqHqF.js";import{p as T}from"./TiledLayerView3D-Czswhv3s.js";import{y as _}from"./LayerView-4cmyAwpN.js";import"./WorkerHandle-W6ckwU_F.js";let r=class extends T(D(_)){constructor(){super(...arguments),this.type="elevation-3d"}get tileInfo(){return this.layer.tileInfo}initialize(){var i,o,c;const e=this.view,t=(i=e.map)==null?void 0:i.allLayers,s=t&&t.includes(this.layer),a=(c=(o=e.map)==null?void 0:o.ground)==null?void 0:c.layers,l=a&&a.includes(this.layer);if(s&&!l){const y=new u("layerview:elevation-layer-only",`3D elevation layer '${this.layer.id}' can only be added to layers in map.ground`);this.addResolvingPromise(Promise.reject(y))}this._lercDecoder=w(e.resourceController),this._addTilingSchemeMatchPromise()}destroy(){this._lercDecoder=m(this._lercDecoder)}async fetchTile(e,t){const s=this.layer;if(f(s)){const o=await s.fetchTile(e[0],e[1],e[2],{noDataValue:d,signal:t.signal});return p(t)?void g.getLogger(this).warnOnce("A call to fetchTile resolved even though the request was aborted. fetchTile should not resolve if options.signal.aborted is true."):o}const a=this.getTileUrl(e),l=await t.requester.request(a,"binary",t),i=await this._lercDecoder.decode(l,{noDataValue:d},t.signal);if(i)return new $(i);throw new Error("LERC decoding failed")}};n([h()],r.prototype,"layer",void 0),n([h()],r.prototype,"tileInfo",null),r=n([v("esri.views.3d.layers.ElevationLayerView3D")],r);const P=r;export{P as default};
