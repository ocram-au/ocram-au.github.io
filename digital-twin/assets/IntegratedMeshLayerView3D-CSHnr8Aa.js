import{dv as n,dA as l,dB as m,P as p,E as d,e,y as i,c8 as c,a as u}from"./index-CMElAQvj.js";import{A as h}from"./I3SMeshView3D-dmXOzY-j.js";import{l as g}from"./LayerView3D-BnTAnLMF.js";import{y}from"./LayerView-DzJ2IoC1.js";import"./Transform-C-VNKXD0.js";import"./RenderTexture-KWWFXQLg.js";import"./I3SOverrides-B7ZAIqgB.js";import"./I3SNode-BiqXkPkf.js";import"./I3SUtil-D2Jja_9P.js";import"./I3SBinaryReader-CMTOwqUe.js";import"./meshFeatureSet-yu0ZwnRc.js";import"./Mesh-G7ncd5Dl.js";import"./MeshTransform-BRnG3E22.js";import"./vertexSpaceConversion-DTd0XwHT.js";import"./External-DY3HisAT.js";import"./infoFor3D-DsOdlPuA.js";import"./FeatureLayerView3D-CmtBmjls.js";import"./FeatureLayerViewBase3D-BGSWKfo1.js";import"./HeatmapDensity.glsl-CcOPfqz-.js";import"./timeSupport-C6NHouHr.js";import"./projectExtentUtils-DWTudPQo.js";import"./dehydratedFeatureComparison-B3wcFA6D.js";import"./queryForSymbologySnapping-KQ0di2zu.js";import"./hash-CcEbRgUF.js";import"./Graphics3DObjectStates-DTuTglsz.js";import"./optimizedFeatureQueryEngineAdapter-PjcwG-Ni.js";import"./PooledRBush-Bn6msnqd.js";import"./quickselect-BIIRGevN.js";import"./popupUtils-ZJMDPVqd.js";import"./QueryEngine-B4ja2bsJ.js";import"./WhereClause-ySImQoYi.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-CTDe3LlQ.js";import"./utils-MPnBhTaj.js";import"./utils-C8XRB2Sq.js";import"./ClassBreaksDefinition-OFsVrRCY.js";import"./FeatureStore-B-1eTAbH.js";import"./BoundsStore-CZP64wuI.js";import"./WorkerHandle-Biea9ygc.js";import"./EventedSet-RdbM8pq_.js";import"./RefreshableLayerView-D5b7Z4Dz.js";import"./SceneModification-Dx4JUokT.js";import"./SceneLayerWorker-Co4VjGEU.js";import"./makeScheduleFunction-CggzEh3c.js";const v=.2;let t=class extends h(g(y)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this._needsNormals=!n("disable-feature:im-shading"),this.drapeTargetType=l.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var r;return((r=this._controller)==null?void 0:r.updatingProgress)??0}get lodFactor(){var r,o,a,s;return((s=(a=(o=(r=this.view)==null?void 0:r.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?v:1}get visibleAtCurrentScale(){return m(this.i3slayer.effectiveScaleRange,this.view.terrainScale)}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){return new d({layer:this.layer,sourceLayer:this.layer})}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const r=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>r,()=>this._modifications=r.toArray(),p),"modifications")}};e([i()],t.prototype,"layer",void 0),e([i()],t.prototype,"i3slayer",null),e([i(c)],t.prototype,"updatingProgress",void 0),e([i()],t.prototype,"updatingProgressValue",null),e([i()],t.prototype,"lodFactor",null),e([i({readOnly:!0})],t.prototype,"progressiveLoadFactor",null),e([i({readOnly:!0})],t.prototype,"visibleAtCurrentScale",null),t=e([u("esri.views.3d.layers.IntegratedMeshLayerView3D")],t);const nt=t;export{nt as default};
