import{dv as n,dA as l,dB as m,P as p,E as d,e,y as i,c8 as c,a as u}from"./index-Ck66FOdU.js";import{A as h}from"./I3SMeshView3D-CDFpW-_n.js";import{l as g}from"./LayerView3D-Cw7LvKIQ.js";import{y}from"./LayerView-DUmhqnbx.js";import"./Transform-BU6L1KcJ.js";import"./RenderTexture-1bLhLUM3.js";import"./I3SOverrides-CA4M9gaZ.js";import"./I3SNode-DAt1DDHU.js";import"./I3SUtil-BpKBNfRn.js";import"./I3SBinaryReader-DxHsIxg3.js";import"./meshFeatureSet-Cjl6PIjc.js";import"./Mesh-DgykLalw.js";import"./MeshTransform-DxYc0tPL.js";import"./vertexSpaceConversion-Dv1jiiDL.js";import"./External-CoCW5jL2.js";import"./infoFor3D-DsOdlPuA.js";import"./FeatureLayerView3D-D6tE6Or6.js";import"./FeatureLayerViewBase3D-BzxwB_PL.js";import"./HeatmapDensity.glsl-DPX4Xi_a.js";import"./timeSupport-DTPTEwxw.js";import"./projectExtentUtils-ChoZWto1.js";import"./dehydratedFeatureComparison-OK83Zgln.js";import"./queryForSymbologySnapping-B3wYv1sd.js";import"./hash-CcEbRgUF.js";import"./Graphics3DObjectStates-D4pA1JCE.js";import"./optimizedFeatureQueryEngineAdapter-CdZx_S93.js";import"./PooledRBush-DFIQfH2b.js";import"./quickselect-UN3hl4o8.js";import"./popupUtils--WMfpTKV.js";import"./QueryEngine-ZsNy58jT.js";import"./WhereClause-zOk6Zp9o.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-CTDe3LlQ.js";import"./utils-DqYzKuHB.js";import"./utils-Dm8ofH7A.js";import"./ClassBreaksDefinition-tTgY20IN.js";import"./FeatureStore-DCUDIF7f.js";import"./BoundsStore-BrVER3Qn.js";import"./WorkerHandle-C_aDAk_L.js";import"./EventedSet-By-jVn9y.js";import"./RefreshableLayerView-DXliGjKm.js";import"./SceneModification-C3ozYzuM.js";import"./SceneLayerWorker-Dzp8doRq.js";import"./makeScheduleFunction-CggzEh3c.js";const v=.2;let t=class extends h(g(y)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this._needsNormals=!n("disable-feature:im-shading"),this.drapeTargetType=l.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var r;return((r=this._controller)==null?void 0:r.updatingProgress)??0}get lodFactor(){var r,o,a,s;return((s=(a=(o=(r=this.view)==null?void 0:r.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?v:1}get visibleAtCurrentScale(){return m(this.i3slayer.effectiveScaleRange,this.view.terrainScale)}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){return new d({layer:this.layer,sourceLayer:this.layer})}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const r=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>r,()=>this._modifications=r.toArray(),p),"modifications")}};e([i()],t.prototype,"layer",void 0),e([i()],t.prototype,"i3slayer",null),e([i(c)],t.prototype,"updatingProgress",void 0),e([i()],t.prototype,"updatingProgressValue",null),e([i()],t.prototype,"lodFactor",null),e([i({readOnly:!0})],t.prototype,"progressiveLoadFactor",null),e([i({readOnly:!0})],t.prototype,"visibleAtCurrentScale",null),t=e([u("esri.views.3d.layers.IntegratedMeshLayerView3D")],t);const nt=t;export{nt as default};
