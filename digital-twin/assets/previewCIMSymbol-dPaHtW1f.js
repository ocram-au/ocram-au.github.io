import{fs as V,d1 as f,aA as h,fm as $,ff as S}from"./index-Bmji7YKu.js";import{t as b}from"./CIMSymbolHelper-CnzXOTCO.js";import{CIMSymbolRasterizer as q}from"./CIMSymbolRasterizer-CVRdIObU.js";import{OverrideHelper as A}from"./OverrideHelper-CqOmel33.js";import"./BidiEngine-QXap_35O.js";import"./rasterizingUtils-DvFsJEQo.js";import"./definitions-DKtXO-DI.js";import"./callExpressionWithFeature-BjmH4JgV.js";const g=new q(null),u=h(S.size),G=h(S.maxSize),M=h(S.lineWidth),D=1;async function E(n,e,s){const i=e==null?void 0:e.size;let t=i!=null&&typeof i=="object"&&"width"in i?i.width:i,o=i!=null&&typeof i=="object"&&"height"in i?i.height:i;if(t==null||o==null)if(s==="esriGeometryPolygon")t=o=e.maxSize?Math.min(e.maxSize,u):u;else{const a=await U(n,e,s);a&&(t=a.width,o=a.height),s==="esriGeometryPolyline"&&(t=e.maxSize?Math.min(e.maxSize,M):M),t=t!=null&&isFinite(t)?Math.min(t,G):u,o=o!=null&&isFinite(o)?Math.max(Math.min(o,G),D):u}return e.style==="legend"&&s==="esriGeometryPolyline"&&(t=M),{width:t,height:o}}async function U(n,e,s){const{feature:i,fieldMap:t,viewParams:o}=e.cimOptions||e,a=await A.resolveSymbolOverrides(n.data,i,null,t,s,null,o);if(!a)return null;(n=n.clone()).data={type:"CIMSymbolReference",symbol:a},n.data.primitiveOverrides=void 0;const l=[];return b.fetchResources(a,g.resourceManager,l),b.fetchFonts(a,g.resourceManager,l),l.length>0&&await Promise.all(l),b.getEnvelope(a,null,g.resourceManager)}async function Q(n,e={}){var z,P;const{node:s,opacity:i,symbolConfig:t}=e,o=t!=null&&typeof t=="object"&&"isSquareFill"in t&&t.isSquareFill,a=e.cimOptions||e,l=a.geometryType||V((z=n==null?void 0:n.data)==null?void 0:z.symbol),r=await E(n,e,l),{feature:I,fieldMap:L}=a,O=e!=null&&e.geometry||o||l!=="esriGeometryPolygon"?"preview":"legend";let v=r;const x=r;if(e!=null&&e.geometry&&(l==="esriGeometryPolygon"||l==="esriGeometryPolyline")&&(f(r.width)<200||f(r.height)<200)){const R=r.width>r.height?h(200)*r.height/r.width:h(200);v={width:r.width>r.height?h(200):h(200)*r.width/r.height,height:R}}const d=await g.rasterizeCIMSymbolAsync(n,I,v,O,L,l,null,a.viewParams,a.allowScalingUp,(P=e==null?void 0:e.geometry)==null?void 0:P.toJSON());if(!d)return null;const{width:F,height:j}=d,c=document.createElement("canvas");c.width=F,c.height=j,c.getContext("2d").putImageData(d,0,0);const p=f(x.width),w=f(x.height),m=new Image(p,w);m.src=c.toDataURL(),m.ariaLabel=e.ariaLabel??null,m.alt=e.ariaLabel??"",i!=null&&(m.style.opacity=`${i}`);let y=m;if(e.effectView!=null){const C={shape:{type:"image",x:0,y:0,width:p,height:w,src:m.src},fill:null,stroke:null,offset:[0,0]};y=$([[C]],[p,w],{effectView:e.effectView,ariaLabel:e.ariaLabel})}return s&&y&&s.appendChild(y),y}export{Q as previewCIMSymbol};
