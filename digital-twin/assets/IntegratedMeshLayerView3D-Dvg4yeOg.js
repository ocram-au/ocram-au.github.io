import{dv as n,dA as l,dB as m,P as p,E as d,e,y as i,c8 as c,a as u}from"./index-DgVS8EBo.js";import{A as h}from"./I3SMeshView3D-0pi6qCNH.js";import{l as g}from"./LayerView3D-CB9WgZWF.js";import{y}from"./LayerView-DnGbKf9m.js";import"./Transform-CrhvBjqg.js";import"./RenderTexture-Y6GYsOmt.js";import"./I3SOverrides-g6yPk3kf.js";import"./I3SNode-BolUU70G.js";import"./I3SUtil-Be5nODqG.js";import"./I3SBinaryReader-B_pQ_rCa.js";import"./meshFeatureSet-BHJX1AzF.js";import"./Mesh-BROsDXb-.js";import"./MeshTransform-Czi6642w.js";import"./vertexSpaceConversion-CH3UOvQq.js";import"./External-CZswWW78.js";import"./infoFor3D-DsOdlPuA.js";import"./FeatureLayerView3D-B2Snto3s.js";import"./FeatureLayerViewBase3D-CqTPOgjk.js";import"./HeatmapDensity.glsl-DIk4sVjs.js";import"./timeSupport-CnpR7AF0.js";import"./projectExtentUtils-Cvd79Wzp.js";import"./dehydratedFeatureComparison--gaDm50S.js";import"./queryForSymbologySnapping-BvZ54Xhy.js";import"./hash-CcEbRgUF.js";import"./Graphics3DObjectStates-BL3zn2LN.js";import"./optimizedFeatureQueryEngineAdapter-B09KUWeh.js";import"./PooledRBush-B_POv9PY.js";import"./quickselect-CZsekGbi.js";import"./popupUtils-7wS_QM3x.js";import"./QueryEngine-DAAMvJBZ.js";import"./WhereClause-CrUsW9F6.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-CTDe3LlQ.js";import"./utils-efpj1rhT.js";import"./utils-Dwayop82.js";import"./ClassBreaksDefinition-B5dYIwEw.js";import"./FeatureStore-DNqoFCT5.js";import"./BoundsStore-uwZGsV6s.js";import"./WorkerHandle-CcVEqpaH.js";import"./EventedSet-CLOiQDkX.js";import"./RefreshableLayerView-Dxg0oWpt.js";import"./SceneModification-AN0Lu7my.js";import"./SceneLayerWorker-Cg9nae4w.js";import"./makeScheduleFunction-CggzEh3c.js";const v=.2;let t=class extends h(g(y)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this._needsNormals=!n("disable-feature:im-shading"),this.drapeTargetType=l.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var r;return((r=this._controller)==null?void 0:r.updatingProgress)??0}get lodFactor(){var r,o,a,s;return((s=(a=(o=(r=this.view)==null?void 0:r.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?v:1}get visibleAtCurrentScale(){return m(this.i3slayer.effectiveScaleRange,this.view.terrainScale)}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){return new d({layer:this.layer,sourceLayer:this.layer})}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const r=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>r,()=>this._modifications=r.toArray(),p),"modifications")}};e([i()],t.prototype,"layer",void 0),e([i()],t.prototype,"i3slayer",null),e([i(c)],t.prototype,"updatingProgress",void 0),e([i()],t.prototype,"updatingProgressValue",null),e([i()],t.prototype,"lodFactor",null),e([i({readOnly:!0})],t.prototype,"progressiveLoadFactor",null),e([i({readOnly:!0})],t.prototype,"visibleAtCurrentScale",null),t=e([u("esri.views.3d.layers.IntegratedMeshLayerView3D")],t);const nt=t;export{nt as default};
