import{dv as n,dA as m,dB as l,P as p,E as d,e as i,y as e,c8 as c,a as u}from"./index-AdHZlOg8.js";import{A as h}from"./I3SMeshView3D-EZfSMc2c.js";import{l as g}from"./LayerView3D-BRAfGNpq.js";import{y}from"./LayerView-Cr4MdW4r.js";import"./Transform-CCtoHVFO.js";import"./RenderTexture-Bno2rL8V.js";import"./I3SOverrides-gIjA2B8d.js";import"./I3SNode-Dik5Z8kc.js";import"./I3SUtil-xAK_Arkk.js";import"./I3SBinaryReader-vv32toWN.js";import"./meshFeatureSet-BJV_vekl.js";import"./Mesh-DebSryNI.js";import"./MeshTransform-D_kV92I_.js";import"./vertexSpaceConversion-CMpw2nPf.js";import"./External-DfP4p0mv.js";import"./infoFor3D-DsOdlPuA.js";import"./FeatureLayerView3D-CY5O5fDq.js";import"./FeatureLayerViewBase3D-yl6vC1Ek.js";import"./HeatmapDensity.glsl-mQ1Gt-jJ.js";import"./timeSupport-CcuKtNpA.js";import"./projectExtentUtils-hasXcXfK.js";import"./dehydratedFeatureComparison-GECiN6Yi.js";import"./queryForSymbologySnapping-0SaKyu-f.js";import"./hash-CcEbRgUF.js";import"./Graphics3DObjectStates-Cjh3vGZG.js";import"./optimizedFeatureQueryEngineAdapter-ClAclZmr.js";import"./PooledRBush-PuTqfpXm.js";import"./quickselect-B-W8Behg.js";import"./popupUtils-BRlPU2gK.js";import"./QueryEngine-B0yVoybS.js";import"./WhereClause-9feFx6fw.js";import"./TimeOnly-D21uqVkm.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-CTDe3LlQ.js";import"./utils-Bjba2Nst.js";import"./utils-BtKIIfVW.js";import"./ClassBreaksDefinition-DNf51pVJ.js";import"./FeatureStore-iayUeabX.js";import"./BoundsStore-BGCcenpS.js";import"./WorkerHandle-82R7TpVu.js";import"./EventedSet-DrllgWS-.js";import"./RefreshableLayerView-C7rp8gJ5.js";import"./SceneModification-BeMLf9iB.js";import"./SceneLayerWorker-BwQP0_cf.js";import"./makeScheduleFunction-CggzEh3c.js";const v=.2;let t=class extends h(g(y)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this._needsNormals=!n("disable-feature:im-shading"),this.drapeTargetType=m.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var r;return((r=this._controller)==null?void 0:r.updatingProgress)??0}get lodFactor(){var r,o,a,s;return((s=(a=(o=(r=this.view)==null?void 0:r.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?v:1}get visibleAtCurrentScale(){return l(this.i3slayer.effectiveScaleRange,this.view.terrainScale)}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){return new d({layer:this.layer,sourceLayer:this.layer})}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const r=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>r,()=>this._modifications=r.toArray(),p),"modifications")}};i([e()],t.prototype,"layer",void 0),i([e()],t.prototype,"i3slayer",null),i([e(c)],t.prototype,"updatingProgress",void 0),i([e()],t.prototype,"updatingProgressValue",null),i([e()],t.prototype,"lodFactor",null),i([e({readOnly:!0})],t.prototype,"progressiveLoadFactor",null),i([e({readOnly:!0})],t.prototype,"visibleAtCurrentScale",null),t=i([u("esri.views.3d.layers.IntegratedMeshLayerView3D")],t);const mt=t;export{mt as default};
