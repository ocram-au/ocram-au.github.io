import{S as y,al as v,cw as m,gI as w,gK as k,mR as C,e as i,y as a,a as g,h as b,au as H,g as L,iL as _,q as $,l as E,dq as O}from"./index-h6vmjViw.js";import{a as I}from"./EdgeWorkerHandle-Dg9Bpb-b.js";import{h as R}from"./WorkerHandle-CtSukJUW.js";import{r as V}from"./VertexSnappingCandidate-BrEiSmsp.js";import"./workerHelper-ChwsMDAE.js";import"./PointSnappingHint-BEIQWQNa.js";let d=class extends y{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new x(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const r=e.coordinateHelper,{point:s}=e,n=P;this.renderCoordsHelper.toRenderCoords(s,r.spatialReference,n);const u=e.distance,c=typeof u=="number"?u:u.distance,h=await this._workerHandle.invoke({bounds:m(n[0],n[1],n[2],c),returnEdge:e.returnEdge,returnVertex:e.vertexMode!=="none"},t);return h.candidates.sort((p,f)=>p.distance-f.distance),h.candidates.map(p=>this._convertCandidate(r,p))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new k({objectId:t.objectId,targetPoint:w(this._convertRenderCoordinate(e,t.target)),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new V({objectId:t.objectId,targetPoint:w(this._convertRenderCoordinate(e,t.target)),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const r=v();return this.renderCoordsHelper.fromRenderCoords(t,r,e),C(r)}async _fetchAllEdgeLocations(e,t){const r=[],s=[];for(const{id:n,uid:u}of e.components)this._ids.has(n)&&r.push((async()=>{const c=await this.fetchEdgeLocations(n,t.signal),h=c.locations.buffer;return s.push(h),{id:n,uid:u,objectIds:c.objectIds,locations:h,origin:c.origin,type:c.type}})());return{result:{components:(await Promise.all(r)).filter(({id:n})=>this._ids.has(n))},transferList:s}}};i([a({constructOnly:!0})],d.prototype,"renderCoordsHelper",void 0),i([a({constructOnly:!0})],d.prototype,"fetchEdgeLocations",void 0),i([a({constructOnly:!0})],d.prototype,"schedule",void 0),i([a({readOnly:!0})],d.prototype,"availability",void 0),d=i([g("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorkerHandle")],d);let x=class extends R{constructor(t,r){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:r})}};const P=v();let o=class extends y{get updating(){return this._updatingHandles.updating}constructor(e){super(e),this.availability=1,this._updatingHandles=new b,this._abortController=new AbortController}destroy(){this._tracker=H(this._tracker),this._abortController=L(this._abortController),this._updatingHandles.destroy()}initialize(){const{view:e}=this,t=e.resourceController;this._edgeWorker=new I(S(t)),this._workerHandle=new d({renderCoordsHelper:this.view.renderCoordsHelper,schedule:S(t),fetchEdgeLocations:async(r,s)=>{if(this._tracker==null)throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(r,this._edgeWorker,s)}}),this._updatingHandles.addPromise(this._setupLayerView()),this.addHandles([_(this._workerHandle),_(this._edgeWorker)])}async fetchCandidates(e,t){return this._workerHandle.fetchCandidates(e,t)}refresh(){}async _setupLayerView(){var r;if(this.destroyed)return;const e=(r=this._abortController)==null?void 0:r.signal,t=await this.getLayerView();t==null||$(e)||(this._tracker=t.trackSnappingSources({add:(s,n)=>{this._updatingHandles.addPromise(this._workerHandle.add({id:s,bounds:n},e))},remove:s=>{this._updatingHandles.addPromise(this._workerHandle.remove({id:s},e))}}))}};function S(e){return t=>e.immediate.schedule(t)}i([a({constructOnly:!0})],o.prototype,"getLayerView",void 0),i([a({constructOnly:!0})],o.prototype,"view",void 0),i([a({readOnly:!0})],o.prototype,"updating",null),i([a({readOnly:!0})],o.prototype,"availability",void 0),o=i([g("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],o);let l=class extends y{get updating(){return this._i3sSources.some(e=>e.updating)}constructor(e){super(e),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach(e=>e.destroy()),this._i3sSources.length=0}initialize(){const{view:e}=this,t=this.layerSource.layer;this._i3sSources=t.type==="building-scene"?this._getBuildingSceneI3SSources(e,t):[this._getSceneLayerI3SSource(e,t)]}async fetchCandidates(e,t){const r=await Promise.all(this._i3sSources.map(s=>s.fetchCandidates(e,t)));return E(t),r.flat()}refresh(){this._i3sSources.forEach(e=>e.refresh())}_getBuildingSceneI3SSources(e,t){return t.allSublayers.toArray().map(r=>r.type==="building-component"?new o({getLayerView:async()=>(await e.whenLayerView(t)).whenSublayerView(r),view:e}):null).filter(O)}_getSceneLayerI3SSource(e,t){return new o({getLayerView:async()=>{const r=await e.whenLayerView(t);return r.type==="scene-layer-graphics-3d"?void 0:r},view:e})}};i([a({constructOnly:!0})],l.prototype,"layerSource",void 0),i([a({constructOnly:!0})],l.prototype,"view",void 0),i([a({readOnly:!0})],l.prototype,"updating",null),i([a({readOnly:!0})],l.prototype,"availability",void 0),l=i([g("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],l);export{l as SceneLayerSnappingSource};
