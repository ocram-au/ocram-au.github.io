import{g as P,Q as x,R as z,T as u,U as L,V as O,W as $,X as A,Y as T,Z as j,$ as k,a0 as E,r as n,m as d,a as J}from"./index-BGUxYM9l.js";const N=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let a=class extends P{constructor(s){super(s),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=N.map(s=>new x({color:[s[0],s[1],s[2],.6],outline:{color:"black",width:1}})),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(s){this._enabled!==s&&(this._enabled=s,this.update())}update(){if(!this._enabled)return void this.clear();const s=e=>{if(e.label!=null)return e.label;let t=e.lij.toString();return e.loadPriority!=null&&(t+=` (${e.loadPriority})`),e.measures&&(t+=`[${e.measures.lodLevel}]`),t},h=this.getTiles(),y=new Array,g=new Set((this._labels.size,this._labels.keys()));h.forEach((e,t)=>{var w;const l=e.lij.toString();g.delete(l);const M=((w=e.measures)==null?void 0:w.lodLevel)??e.level,p=e.geometry;if(this.enablePolygons&&!this._polygons.has(l)){const o=new z({geometry:p,symbol:this._symbols[M%this._symbols.length]});this._polygons.set(l,o),y.push(o)}if(this.enableLabels){const o=s(e),_=t/(h.length-1),c=L(0,200,_),m=L(20,6,_)/.75,v=e.loadPriority!=null&&e.loadPriority>=h.length,f=new u([c,v?0:c,v?0:c]),S=this.view.type==="3d"?()=>new O({verticalOffset:new T({screenLength:40/.75}),callout:new A({color:new u("white"),border:new k({color:new u("black")})}),symbolLayers:new $([new j({text:o,halo:{color:"white",size:1/.75},material:{color:f},size:m})])}):()=>new E({text:o,haloColor:"white",haloSize:1/.75,color:f,size:m}),r=this._labels.get(l);if(r){const i=S();r.symbol!=null&&JSON.stringify(i)===JSON.stringify(r.symbol)||(r.symbol=i)}else{const i=new z({geometry:p.extent.center,symbol:S()});this._labels.set(l,i),y.push(i)}}});const b=new Array;g.forEach(e=>{const t=this._polygons.get(e);t!=null&&(b.push(t),this._polygons.delete(e));const l=this._labels.get(e);l!=null&&(b.push(l),this._labels.delete(e))}),this.view.graphics.removeMany(b),this.view.graphics.addMany(y)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};n([d({constructOnly:!0})],a.prototype,"view",void 0),n([d({readOnly:!0})],a.prototype,"updating",void 0),n([d()],a.prototype,"enabled",null),a=n([J("esri.views.support.TileTreeDebugger")],a);export{a as d};
