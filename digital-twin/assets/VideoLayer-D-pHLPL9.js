import{ei as v,cR as f,r as t,m as r,a as c,as as T,cq as m,cW as $,g as w,gO as N,gZ as U,cn as j,hb as E,ar as L,e as P,P as F,pV as J,bO as R,J as B,F as S,N as C,at as M,a6 as k,aN as b,cs as _}from"./index-BGUxYM9l.js";import{C as q,L as H,f as V,g as z,P as D,d as W,n as G,l as A}from"./VideoController-CqsS1hK5.js";import"./_commonjsHelpers-DCkdB7M8.js";let p=class extends v.ClonableMixin(f){constructor(e){super(e),this.framerate=null,this.containerFormat=null,this.gop=null,this.aspectRatio=null,this.klv=null}};t([r({type:String})],p.prototype,"framerate",void 0),t([r({type:String})],p.prototype,"containerFormat",void 0),t([r({type:Number})],p.prototype,"gop",void 0),t([r({type:String})],p.prototype,"aspectRatio",void 0),t([r({type:Object})],p.prototype,"klv",void 0),p=t([c("esri.layers.support.PlaybackInfo")],p);const Q=p;let s=class extends v.ClonableMixin(f){constructor(e){super(e),this.frame=null,this.frameCenter=null,this.frameOutline=null,this.lineOfSight=null,this.sensorLocation=null,this.sensorTrail=null}};t([r({type:Boolean})],s.prototype,"frame",void 0),t([r({type:Boolean})],s.prototype,"frameCenter",void 0),t([r({type:Boolean})],s.prototype,"frameOutline",void 0),t([r({type:Boolean})],s.prototype,"lineOfSight",void 0),t([r({type:Boolean})],s.prototype,"sensorLocation",void 0),t([r({type:Boolean})],s.prototype,"sensorTrail",void 0),s=t([c("esri.layers.support.TelemetryDisplay")],s);const x=s;let d=class extends w{constructor(){super(...arguments),this.sourcePoint=null,this.mapPoint=null}};function Z(e){return(e==null?void 0:e.sourcePoint)!=null&&e.mapPoint!=null}t([r()],d.prototype,"sourcePoint",void 0),t([r({type:T})],d.prototype,"mapPoint",void 0),d=t([c("esri.layers.support.VideoFrame.ControlPoint")],d);let u=class extends v.ClonableMixin(f){constructor(e){super(e),this.frame=null,this.controlPoints=null}readControlPoints(e){return e.map(l=>({sourcePoint:{x:l.frameX,y:l.frameY},mapPoint:new T(l.point)}))}writeControlPoints(e,l){e!=null&&Z(e[0])&&(l.controlPoints=e.map(n=>{const i=n.sourcePoint,y=n.mapPoint;return{frameX:i.x,frameY:i.y,point:y.toJSON()}}))}};t([r({type:String})],u.prototype,"frame",void 0),t([r({type:[d],json:{write:{allowNull:!1,isRequired:!0}}})],u.prototype,"controlPoints",void 0),t([m("controlPoints")],u.prototype,"readControlPoints",null),t([$("controlPoints")],u.prototype,"writeControlPoints",null),u=t([c("esri.layers.support.VideoFrame")],u);const X=u;let o=class extends N(U(j(E(k)))){constructor(e){super(e),this._trailPoints=[],this.capabilities=null,this.connectionInfo=null,this.controller=new q,this.copyright=null,this.created=null,this.description=null,this.elevationSource=null,this.frame=null,this.frameCount=null,this.fullExtent=null,this.initialExtent=null,this.layerId=null,this.playbackInfo=null,this.posterUrl=null,this.qualities=null,this.serviceItemId=null,this.sourceJSON=null,this.sourceQuality=null,this.sourceType=null,this.spatialReference=L.WGS84,this.telemetryDisplay=null,this.title=null,this.type="video",this.url=null,this.videoLayersInfo=null,this.videoTimeExtent=null}initialize(){this.telemetryDisplay=new x({frame:!1,frameCenter:!1,frameOutline:!0,lineOfSight:!0,sensorLocation:!0,sensorTrail:!0}),this.addHandles([P(()=>this.metadata,()=>{this.notifyChange("telemetry"),this.notifyChange("groundControlPoints"),this.notifyChange("frameHorizonPoints")}),P(()=>{var e;return(e=this.telemetry)==null?void 0:e.sensorLocation},e=>this._setSensorTrail(e),F)])}load(e){const l=e!=null?e.signal:null;return this.addResolvingPromise(this._fetchService(l)),Promise.resolve(this)}get buffered(){return this.controller.buffered}readCapabilitiesFromService(e,l){return J(l)}readConnectionInfo(e,l){const n=Object.values(l.connectionUrl);return n!=null&&n.length&&(this.controller.playerUrl=n[0]),l.connectionUrl}get currentTime(){return this.controller.currentTime}get duration(){return this.controller.duration}get ended(){return this.controller.ended}get frameHorizonPoints(){return H(this.metadata)}get groundControlPoints(){return V(this.metadata)}get loop(){return this.controller.loop}set loop(e){this.controller.loop=e}get metadata(){var e;return(e=this.controller)==null?void 0:e.currentMetadata}get mimeType(){var e;return(e=this.controller)==null?void 0:e.mimeType}get muted(){return this.controller.muted}set muted(e){this.controller.muted=e}get playbackRate(){return this.controller.rate}set playbackRate(e){this.controller.rate=e}get playerUrl(){return this.controller.playerUrl}get playing(){return this.controller.playing}get state(){return this.controller.state}get telemetry(){return z(this.metadata)}get videoElement(){var e;return(e=this.controller)==null?void 0:e.element}get videoHeight(){var e;return(e=this.controller)==null?void 0:e.videoHeight}readLayerInfosFromService(e,l){return D(l)}get videoWidth(){var e;return(e=this.controller)==null?void 0:e.videoWidth}get waiting(){return this.controller.waiting}play(){this.controller.play()}pause(){this.controller.pause()}reset(){this.controller.reset()}setCurrentTime(e){if(!this.duration)return;const l=R(e,0,this.duration);this.controller.setCurrentTime(l)}toGround(e,l){var n,i;return(i=(n=this.controller)==null?void 0:n.sensorModel)!=null&&i.metadataSupportsTransforms?this.controller.sensorModel.transformImageToGeo(e,l):null}toVideo(e){var n,i;if(!((i=(n=this.controller)==null?void 0:n.sensorModel)!=null&&i.metadataSupportsTransforms))return null;const l=this.controller.sensorModel.transformGeoToImage(e.x,e.y,e.z);return{x:l[0],y:l[1]}}async _fetchService(e){var g,O;if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const l=B((g=this.parsedUrl)==null?void 0:g.path);if(l==null)throw new S("arcgis-layers:url-mismatch","The url is not a valid arcgis resource");let n=null;const{data:i,ssl:y}=await C(l.url.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters},signal:e}),a=i;if(this.url=l.url.path,y&&(this.url=this.url.replace(/^http:/i,"https:")),!(a!=null&&a.currentVersion))return a.currentVersion="11.2",this.sourceJSON=a,void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});let h=l==null?void 0:l.sublayer;if(h==null&&((O=a.layers)!=null&&O.length)&&(h=a.layers[0].id),h==null)throw new S("arcgis-layers:url-mismatch","The url is not a valid arcgis resource");this.url=`${l.url.path}/${h}`,n=await C(this.url,{query:{f:"json",...this.customParameters},signal:e});const I={...a,...n.data};this.sourceJSON=I,this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl})}_setSensorTrail(e){if(!e)return;const l=W(e,this._trailPoints);this._trailPoints=[...l];const n=this._trailPoints.map(y=>y.toArray()),i=new M({hasZ:e.hasZ,paths:[n]});this.telemetry.sensorTrail=i.clone()}};t([r({readOnly:!0})],o.prototype,"buffered",null),t([r({readOnly:!0,json:{read:!1}})],o.prototype,"capabilities",void 0),t([m("service","capabilities",["supportsAppend","supportsCoverageQuery","supportsExportClip","supportsExportFrameset","supportsMensuration","supportsUpdate"])],o.prototype,"readCapabilitiesFromService",null),t([r({readOnly:!0})],o.prototype,"connectionInfo",void 0),t([m("connectionInfo",["connectionUrl"])],o.prototype,"readConnectionInfo",null),t([r()],o.prototype,"controller",void 0),t([r({type:String})],o.prototype,"copyright",void 0),t([r({readOnly:!0,type:Date})],o.prototype,"created",void 0),t([r({type:Number})],o.prototype,"currentTime",null),t([r({type:String})],o.prototype,"description",void 0),t([r({type:Number})],o.prototype,"duration",null),t([r({readOnly:!0})],o.prototype,"elevationSource",void 0),t([r({type:Boolean})],o.prototype,"ended",null),t([r({type:X})],o.prototype,"frame",void 0),t([r({readOnly:!0,type:Number})],o.prototype,"frameCount",void 0),t([r({type:b})],o.prototype,"fullExtent",void 0),t([r({readOnly:!0})],o.prototype,"frameHorizonPoints",null),t([r({readOnly:!0})],o.prototype,"groundControlPoints",null),t([r({type:b})],o.prototype,"initialExtent",void 0),t([r({readOnly:!0,json:{read:{source:"id"}}})],o.prototype,"layerId",void 0),t([r({type:Boolean})],o.prototype,"loop",null),t([r({readOnly:!0})],o.prototype,"metadata",null),t([r({readOnly:!0})],o.prototype,"mimeType",null),t([r({type:Boolean})],o.prototype,"muted",null),t([r({type:Q})],o.prototype,"playbackInfo",void 0),t([r({type:Number})],o.prototype,"playbackRate",null),t([r({type:String})],o.prototype,"playerUrl",null),t([r({readOnly:!0})],o.prototype,"playing",null),t([r({readOnly:!0,json:{read:{source:"poster"}}})],o.prototype,"posterUrl",void 0),t([r({readOnly:!0})],o.prototype,"qualities",void 0),t([r({readOnly:!0})],o.prototype,"serviceItemId",void 0),t([r()],o.prototype,"sourceJSON",void 0),t([r({readOnly:!0})],o.prototype,"sourceQuality",void 0),t([r({readOnly:!0,json:{name:"serviceType"}})],o.prototype,"sourceType",void 0),t([r()],o.prototype,"spatialReference",void 0),t([r({readOnly:!0,type:String})],o.prototype,"state",null),t([r({readOnly:!0,type:G})],o.prototype,"telemetry",null),t([r({type:x})],o.prototype,"telemetryDisplay",void 0),t([r({readOnly:!1,json:{read:{source:"name"}}})],o.prototype,"title",void 0),t([r({readOnly:!0})],o.prototype,"type",void 0),t([r(_)],o.prototype,"url",void 0),t([r({readOnly:!0})],o.prototype,"videoElement",null),t([r({readOnly:!0})],o.prototype,"videoHeight",null),t([r({readOnly:!0,json:{read:!1}})],o.prototype,"videoLayersInfo",void 0),t([m("service","videoLayersInfo",["id","name","poster","serviceType","type"])],o.prototype,"readLayerInfosFromService",null),t([r({readOnly:!0,nonNullable:!1,json:{read:{reader:A,source:"time"}}})],o.prototype,"videoTimeExtent",void 0),t([r({readOnly:!0})],o.prototype,"videoWidth",null),t([r({readOnly:!0})],o.prototype,"waiting",null),o=t([c("esri.layers.VideoLayer")],o);const et=o;export{et as default};
