import{aP as c,ay as i,dY as a,dZ as f,d_ as m,d$ as p}from"./index-Bmji7YKu.js";import{geodesicLength as o}from"./geometryEngine-U33y_Y3w.js";import{r as u}from"./geodesicMeasurementUtils-Bm7xIN3i.js";function P(e){const{spatialReference:n}=e;return u(n,y,h,e)}function b(e,n){if(!c(e.spatialReference,n.spatialReference))return null;const{spatialReference:r}=e;return t[0]=e.x,t[1]=e.y,t[2]=e.hasZ?e.z:0,s[0]=n.x,s[1]=n.y,s[2]=n.hasZ?n.z:0,l(t,s,r)}function l(e,n,r){return u(r,d,R,e,n,r)}function d(e,n,r){return a(m(x,e,n,r).distance,"meters")}function R(e,n,r){return a(o(g(e,n,r),"meters"),"meters")}function y(e){return a(f([e],"meters")[0],"meters")}function h(e){return a(o(e,"meters"),"meters")}function g(e,n,r){return{type:"polyline",spatialReference:r,paths:[[[...e],[...n]]]}}const x=new p,t=i(),s=i();export{b as f,P as m,l as u};
