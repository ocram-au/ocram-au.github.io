import{dv as n,dA as m,dB as l,P as p,E as d,e as i,y as e,c8 as c,a as u}from"./index-DI4hWYwA.js";import{A as h}from"./I3SMeshView3D-CuPO107V.js";import{l as g}from"./LayerView3D-DjWI8AeU.js";import{y}from"./LayerView-C1Ag85rk.js";import"./Transform-TixprA5q.js";import"./RenderTexture-SgQbm32J.js";import"./I3SOverrides-aHOacMKp.js";import"./I3SNode-B6I3S5nS.js";import"./I3SUtil-CWZPs0DW.js";import"./I3SBinaryReader-BwoJLHSI.js";import"./meshFeatureSet-DD4tX3rn.js";import"./Mesh-BhvOLZ7b.js";import"./MeshTransform-BMXonHkp.js";import"./vertexSpaceConversion-CGG5zfKH.js";import"./External-ChqTDFP4.js";import"./infoFor3D-DsOdlPuA.js";import"./FeatureLayerView3D-ZHw6BLrw.js";import"./FeatureLayerViewBase3D-Byx_c3bE.js";import"./HeatmapDensity.glsl-BhJgMYPG.js";import"./timeSupport-Bt0t3D72.js";import"./projectExtentUtils-CGlgMCLw.js";import"./dehydratedFeatureComparison-NIzUVKxw.js";import"./queryForSymbologySnapping-Ciwde6Fy.js";import"./hash-CcEbRgUF.js";import"./Graphics3DObjectStates-CzGRAzjl.js";import"./optimizedFeatureQueryEngineAdapter-CaflWlin.js";import"./PooledRBush-6A9R7Jta.js";import"./quickselect-eyl4UMgy.js";import"./popupUtils-jZ4Ih1Ob.js";import"./QueryEngine-CFsqB4pi.js";import"./WhereClause-DMYHdW7E.js";import"./TimeOnly-0AjLhGZ9.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-CTDe3LlQ.js";import"./utils-vO2C5gAm.js";import"./utils-DpVzXVjq.js";import"./ClassBreaksDefinition-CNnegH9J.js";import"./FeatureStore-Ctqr1g76.js";import"./BoundsStore-C3KHx5GD.js";import"./WorkerHandle-BjP8mmRY.js";import"./EventedSet-BcaiIBVp.js";import"./RefreshableLayerView-DAmAhZ1l.js";import"./SceneModification-CGGMsmUk.js";import"./SceneLayerWorker-BiElDfOp.js";import"./makeScheduleFunction-CggzEh3c.js";const v=.2;let t=class extends h(g(y)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this._needsNormals=!n("disable-feature:im-shading"),this.drapeTargetType=m.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var r;return((r=this._controller)==null?void 0:r.updatingProgress)??0}get lodFactor(){var r,o,a,s;return((s=(a=(o=(r=this.view)==null?void 0:r.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?v:1}get visibleAtCurrentScale(){return l(this.i3slayer.effectiveScaleRange,this.view.terrainScale)}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){return new d({layer:this.layer,sourceLayer:this.layer})}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const r=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>r,()=>this._modifications=r.toArray(),p),"modifications")}};i([e()],t.prototype,"layer",void 0),i([e()],t.prototype,"i3slayer",null),i([e(c)],t.prototype,"updatingProgress",void 0),i([e()],t.prototype,"updatingProgressValue",null),i([e()],t.prototype,"lodFactor",null),i([e({readOnly:!0})],t.prototype,"progressiveLoadFactor",null),i([e({readOnly:!0})],t.prototype,"visibleAtCurrentScale",null),t=i([u("esri.views.3d.layers.IntegratedMeshLayerView3D")],t);const mt=t;export{mt as default};
