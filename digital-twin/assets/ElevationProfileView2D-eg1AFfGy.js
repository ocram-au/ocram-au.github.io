import{f as _,aH as g,l as y,o as v,nG as f,g as m,R as w,hM as $,az as M,ep as P,nH as R,iz as D,e as n,A as r,r as d,m as c,a as b,mJ as E,u as o,nI as H}from"./index--YEV5yv0.js";import{t as L,a as S}from"./visualizationUtils-C1XdNIXn.js";class I{constructor(e){this._params=e,this._highlightTask=null,this._highlightHandle=null}destroy(){this.remove()}remove(){this._highlightTask=_(this._highlightTask),this._highlightHandle=g(this._highlightHandle)}update(e){if(this.remove(),e==null||!k(e))return;const i=e.layer;this._highlightTask=y(async t=>{const a=await this._params.view.whenLayerView(i);v(t);const h=f(a)?a:null;h&&(this._highlightHandle=h.highlight(e))})}}function k(s){return s.geometry!=null&&s.geometry.type==="polyline"}let l=class extends m{constructor(s){super(s),this._chartData=null,this._graphic=new w,this._layer=new $({listMode:"hide",internal:!0,title:"Profile line"}),this._update=e=>{var h,p;const{chartData:i}=e;if(i==null)return this.remove();if(!i.refined)return;const t=i.lines.find(u=>u.viewVisualizationEnabled);if(!t)return;this._graphic.geometry=L(t,e.spatialReference),this._graphic.symbol=new M({data:{type:"CIMSymbolReference",symbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",effects:[{type:"CIMGeometricEffectDashes",dashTemplate:[5,10],lineDashEnding:"HalfPattern",controlPointEnding:"HalfPattern"}],capStyle:"Butt",width:1.5,color:t.color.toArray()},{type:"CIMSolidStroke",capStyle:"Butt",width:2,color:P(t.color).toArray()}]}}});const a=(p=(h=this.view)==null?void 0:h.map)==null?void 0:p.layers;a&&!a.includes(this._layer)&&a.add(this._layer)}}initialize(){this._layer.add(this._graphic);const s=D().profileLinesUpdateThrottleMillis;let e=this._update;{const i=R(this._update,s);this.addHandles(i),e=i}this.addHandles(n(()=>({spatialReference:this.view.spatialReference,chartData:this._chartData}),e,r))}destroy(){this.remove()}remove(){var s,e;(e=(s=this.view)==null?void 0:s.map)==null||e.remove(this._layer)}update(s){this._chartData=s}};d([c()],l.prototype,"view",void 0),d([c()],l.prototype,"_chartData",void 0),l=d([b("esri.widgets.ElevationProfile.support.ProfileLine2D")],l);class z{constructor(e,i){this._handles=new E,this._inputRepresentation=new I({view:e}),this._hoveredPoints=new S({view:e}),this._profileLine=new l({view:e}),this._handles.add([n(()=>i.viewModel.hoveredPoints,t=>this._hoveredPoints.update(t),r),n(()=>{const{state:t,highlightEnabled:a,viewModel:h}=i;return{input:h.input,state:t,highlightEnabled:a}},t=>this._updateInputRepresentation(t),r),n(()=>i.viewModel.chartData,t=>this._profileLine.update(t),r),n(()=>{var t;return(t=i.viewModel.input)==null?void 0:t.geometry},()=>{this._profileLine.remove()},r)])}destroy(){this._handles=o(this._handles),this._inputRepresentation=o(this._inputRepresentation),this._hoveredPoints=o(this._hoveredPoints),this._profileLine=o(this._profileLine)}_updateInputRepresentation({input:e,state:i,highlightEnabled:t}){i===H.Selected&&t?this._inputRepresentation.update(e):this._inputRepresentation.remove()}}export{z as ElevationProfileView2D};
