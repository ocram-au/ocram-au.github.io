import{cj as I,bh as Q,a6 as X,nc as S,fz as A,nd as _,bc as g,U as f,q as u,gS as Z,fU as ss,iY as es,n as ts,iR as os,C as ns}from"./index-os5flD40.js";import{h as as,N as rs,i as E,o as U,A as is}from"./External-DXhGHBeN.js";import{r as cs,n as ls,a as us,d as ps,c as x,l as ms,t as fs,u as ds,p as gs}from"./uploadAssetErrors-DNaZ2aGF.js";import{s as hs,u as k,i as ws}from"./infoFor3D-DsOdlPuA.js";const $={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function h(t,e=o=>{},s){return new ys(t,e,s)}let ys=class{constructor(e,s=n=>{},o){if(this.onProgress=s,this.taskName=o,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof e=="number"){this._weights={};for(let n=0;n<e;n++){const a=n,r=1/e;this._weights[a]=r,this._progressMap.set(a,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,o]of this._progressMap.entries())e+=o*this._weights[s];if(e===1&&I("enable-feature:esri-3dofl-upload-timings")){const s=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${s} sec`);for(const[o,n]of this._timingsMap){const a=Math.round(n.end-n.start)/1e3,r=Math.round(a/s*100);console.log(this.taskName??"Task",{stepKey:o,stepTime:a,relativeTime:r})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),I("enable-feature:esri-3dofl-upload-timings")){const o=performance.now();this._startTime??(this._startTime=o);const n=Q(this._timingsMap,e,()=>({start:o,end:0}));s===1&&(n.end=o)}this.emitProgress()}simulate(e,s){return D(o=>this.setProgress(e,o),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}};function D(t=s=>{},e=Ms){const s=performance.now();t(0);const o=setInterval(()=>{const n=performance.now()-s,a=1-Math.exp(-n/e);t(a)},$s);return X(()=>{clearInterval(o),t(1)})}function Ps(t,e=bs){return S(_(t*B/e))}function Ts(t,e=As){return S(_(t*B/e))}const bs=10,As=10,B=8e-6,$s=A(50),Ms=A(1e3),C=1e6,N=20*C,js=2e9,Fs=3;async function vs({data:t,name:e,description:s},o,n){let a=null;try{const r=g(o,"uploads"),i=g(r,"info"),{data:c}=await f(i,{query:{f:"json"},responseType:"json"});u(n);const p=Z(o),l=c.maxUploadFileSize*C,d=p?js:l,b=p?Math.min(N,l):N;if(t.size>d)throw new Error("Data too large");const L=g(r,"register"),{data:M}=await f(L,{query:{f:"json",itemName:Is(e),description:s},responseType:"json",method:"post"});if(u(n),!M.success)throw new Error("Registration failed");const{itemID:H}=M.item;a=g(r,H);const G=g(a,"uploadPart"),j=Math.ceil(t.size/b),w=new Array;for(let m=0;m<j;++m)w.push(t.slice(m*b,Math.min((m+1)*b,t.size)));const y=w.slice().reverse(),F=new Array,J=h(j,n==null?void 0:n.onProgress,"uploadItem"),W=async()=>{for(;y.length!==0;){const m=w.length-y.length,P=y.pop(),T=new FormData,V=J.simulate(m,Ps(P.size));try{T.append("f","json"),T.append("file",P),T.append("partId",`${m}`);const{data:Y}=await f(G,{timeout:0,body:T,responseType:"json",method:"post"});if(u(n),!Y.success)throw new Error("Part upload failed")}finally{V.remove()}}};for(let m=0;m<Fs&&y.length!==0;++m)F.push(W());await Promise.all(F);const K=g(a,"commit"),{data:v}=await f(K,{query:{f:"json",parts:w.map((m,P)=>P).join(",")},responseType:"json",method:"post"});if(u(n),!v.success)throw new Error("Commit failed");return v.item}catch(r){if(a!=null){const i=g(a,"delete");await f(i,{query:{f:"json"},responseType:"json",method:"post"})}throw r}}function Is(t){return t.replaceAll("/","_").replaceAll("\\","_")}async function se(t,e,s){var a;const o=t.length;if(!o)return(a=s==null?void 0:s.onProgress)==null||a.call(s,1),[];const n=h(o,s==null?void 0:s.onProgress,"uploadAssets");return Promise.all(t.map((r,i)=>Ns(r,e,{...s,onProgress:n.makeOnProgress(i)})))}async function Ns(t,{layer:e,ongoingUploads:s},o){var r;const n=s.get(t);if(n)return n;if(!Js(e))throw new cs;if(Ss(t,e))return(r=o==null?void 0:o.onProgress)==null||r.call(o,1),t;const a=_s(t,e,o);s.set(t,a);try{await a}finally{s.delete(t)}return t}function Ss(t,e){const{parsedUrl:s}=e;return s!=null&&t.metadata.externalSources.some(o=>as(o,s))}async function _s(t,e,s){const{metadata:o}=t,{displaySource:n}=o,a=O(n==null?void 0:n.source,e),r=!!a,i=o.externalSources.length>0,c=r?Es(a,e,s):i?Us(t,e,s):xs(t,e,s),p=await c;return u(s),t.addExternalSources([p]),t}async function Es(t,e,s){return{source:await q(t,e,s),original:!0}}async function Us(t,e,s){const o=z(e),{externalSources:n}=t.metadata,a=Ds(n,e);if(!a)throw new ls;const r=h($.uploadConvertibleSource,s==null?void 0:s.onProgress,"uploadConvertibleSource"),i=await q(a,e,{onProgress:r.makeOnProgress("uploadEditSource")});t.addExternalSources([{source:i,original:!0}]);const c=a.reduce((l,{asset:d})=>d instanceof File?l+d.size:l,0),p=r.simulate("serviceAssetsToGlb",Ts(c));try{return{source:await Ls(i,e,o)}}finally{p.remove()}}async function xs(t,e,s){const o=h($.uploadLocalMesh,s==null?void 0:s.onProgress,"uploadLocalMesh"),n=ks(t,e,{...s,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await R([n],e,{...s,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:t.extent.clone(),original:!0}}async function ks(t,e,s){const o=z(e),n=await t.load(s),a=await n.toBinaryGLTF({origin:n.origin,signal:s==null?void 0:s.signal,ignoreLocalTransform:!0});return u(s),{blob:new Blob([a],{type:"model/gltf-binary"}),assetName:`${ss()}.glb`,assetType:o}}function Ds(t,e){for(const s of t){const o=O(s.source,e);if(o)return o}return null}function O(t,e){if(!t)return null;const{infoFor3D:{supportedFormats:s,editFormats:o}}=e,n=is(t),a=new Array;let r=!1;for(let i=0;i<n.length;++i){const c=Bs(n[i],s);if(!c)return null;o.includes(c.assetType)&&(r=!0),a.push(c)}return r?a:null}function Bs(t,e){const s=rs(t,e);return s?{asset:t,assetType:s}:null}async function q(t,e,s){return R(t.map(o=>Cs(o,s)),e,s)}async function R(t,e,s){const o=h($.uploadAssetBlobs,s==null?void 0:s.onProgress,"uploadAssetBlobs"),n=await qs(t,e,{...s,onProgress:o.makeOnProgress("prepareAssetItems")});u(s);const a=n.map(({item:i})=>i),{uploadResults:r}=await Rs(a,e,{...s,onProgress:o.makeOnProgress("uploadAssetItems")});return u(s),t.map((i,c)=>zs(n[c],r[c],e))}async function Cs(t,e){const{asset:s,assetType:o}=t;if(s instanceof File)return{blob:s,assetName:s.name,assetType:o};const n=await s.toBlob(e);return u(e),{blob:n,assetName:s.assetName,assetType:o}}async function Os(t,e,s){const{blob:o,assetType:n,assetName:a}=t;let r=null;try{const i=await vs({data:o,name:a},e.url,s);u(s),r={assetType:n,assetUploadId:i.itemID}}catch(i){ts(i),Ws().warnOnce(`Service ${e.url} does not support the REST Uploads API.`)}if(!r){const i=await os(o);if(u(s),!i.isBase64)throw new ds;r={assetType:n,assetData:i.data}}if(!r)throw new gs;return{item:r,assetName:a}}function qs(t,e,s){const o=h(t.length,s==null?void 0:s.onProgress,"prepareAssetItems");return Promise.all(t.map(async(n,a)=>{const r=Os(await n,e,{...s,onProgress:o.makeOnProgress(a)});return u(s),r}))}async function Rs(t,e,s){const o=D(s==null?void 0:s.onProgress);try{const n=await f(g(e.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(t)},method:"post",responseType:"json"});if(u(s),n.data.uploadResults.length!==t.length)throw new us(t.length,n.data.uploadResults.length);return n.data}finally{o.remove()}}function zs(t,e,s){const{success:o}=e;if(!o){const{error:p}=e;throw new ps(t.assetName,p)}const{assetHash:n}=e,{assetName:a,item:{assetType:r}}=t,{infoFor3D:{supportedFormats:i}}=s,c=hs(r,i);if(!c)throw new x(r);return new E(a,c,[new U(`${s.parsedUrl.path}/assets/${n}`,n)])}async function Ls(t,e,s){var p;const o=t.map(({assetName:l,parts:d})=>({assetName:l,assetHash:d[0].partHash})),n=(p=e.capabilities)==null?void 0:p.operations.supportsAsyncConvert3D,a={f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:s,async:n},r=g(e.parsedUrl.path,"convert3D");let i;try{i=(await(n?Gs:Hs)(r,{query:a,responseType:"json",timeout:0})).data}catch{throw new ms}const{supportedFormats:c}=e.infoFor3D;return i.assets.map(l=>{const d=k(l.contentType,c);if(!d)throw new x(d);return new E(l.assetName,l.contentType,[new U(l.assetURL,l.assetHash)])})}function Hs(t,e){return f(t,e)}async function Gs(t,e){const s=(await f(t,e)).data.statusUrl;for(;;){const o=(await f(s,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return f(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await es(Ks)}}function Js(t){return!!t.infoFor3D&&!!t.url}function z(t){const{infoFor3D:e}=t,s=k("model/gltf-binary",e.supportedFormats)??ws("glb",e.supportedFormats);if(!s)throw new fs;return s}function Ws(){return ns.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const Ks=A(1e3);export{se as uploadAssets};
