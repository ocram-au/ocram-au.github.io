import{dv as n,dA as l,dB as m,P as p,E as d,e,y as i,c8 as u,a as c}from"./index-muoB0VoA.js";import{A as h}from"./I3SMeshView3D-QdJUe5Ck.js";import{l as g}from"./LayerView3D-DztjS8Hw.js";import{y}from"./LayerView-CqkC1Dlg.js";import"./Transform-Ebiajms3.js";import"./RenderTexture-DYbbPgKv.js";import"./I3SOverrides-DAu11bhJ.js";import"./I3SNode-CwRzL39Q.js";import"./I3SUtil-CK9Nh3kQ.js";import"./I3SBinaryReader-B80qdLWs.js";import"./meshFeatureSet-CPNB8FkV.js";import"./Mesh-i0NrjHqj.js";import"./MeshTransform-B_hQrhUA.js";import"./vertexSpaceConversion-D7G3w8TF.js";import"./External-q8RKEpIb.js";import"./infoFor3D-DoIvrFnw.js";import"./FeatureLayerView3D-DSRJh-nM.js";import"./FeatureLayerViewBase3D-DvnAcukA.js";import"./HeatmapDensity.glsl-DS904YRs.js";import"./timeSupport-BtnC88BA.js";import"./projectExtentUtils-Cyrx7DxE.js";import"./dehydratedFeatureComparison-D_blb9Bh.js";import"./queryForSymbologySnapping-BAn_aDQk.js";import"./hash-CcEbRgUF.js";import"./Graphics3DObjectStates-DMDENPwk.js";import"./optimizedFeatureQueryEngineAdapter-CuoZIxwD.js";import"./PooledRBush-BVvLYZIU.js";import"./quickselect-cxNfsONH.js";import"./popupUtils-DPuCmDbV.js";import"./QueryEngine-Be5sDswC.js";import"./WhereClause-DTOAtRVo.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-CTDe3LlQ.js";import"./utils-CaNmeXqZ.js";import"./utils-1dPX-_Us.js";import"./ClassBreaksDefinition-B6OorDKY.js";import"./FeatureStore-BXfmxgO2.js";import"./BoundsStore-BerB78Bj.js";import"./WorkerHandle-B6TCPUUg.js";import"./EventedSet-pLCQP208.js";import"./RefreshableLayerView-UTCZBbtE.js";import"./SceneModification-Dfafumk4.js";import"./SceneLayerWorker-CmF13tfg.js";import"./makeScheduleFunction-CggzEh3c.js";const f=.2;let t=class extends h(g(y)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this._needsNormals=!n("disable-feature:im-shading"),this.drapeTargetType=l.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var r;return((r=this._controller)==null?void 0:r.updatingProgress)??0}get lodFactor(){var r,o,a,s;return((s=(a=(o=(r=this.view)==null?void 0:r.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?f:1}get visibleAtCurrentScale(){return m(this.i3slayer.effectiveScaleRange,this.view.terrainScale)}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){return new d({layer:this.layer,sourceLayer:this.layer})}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const r=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>r,()=>this._modifications=r.toArray(),p),"modifications")}};e([i()],t.prototype,"layer",void 0),e([i()],t.prototype,"i3slayer",null),e([i(u)],t.prototype,"updatingProgress",void 0),e([i()],t.prototype,"updatingProgressValue",null),e([i()],t.prototype,"lodFactor",null),e([i({readOnly:!0})],t.prototype,"progressiveLoadFactor",null),e([i({readOnly:!0})],t.prototype,"visibleAtCurrentScale",null),t=e([c("esri.views.3d.layers.IntegratedMeshLayerView3D")],t);const nt=t;export{nt as default};
