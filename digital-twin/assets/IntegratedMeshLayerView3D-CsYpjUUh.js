import{dv as n,dA as l,dB as m,P as p,E as d,e,y as i,c8 as c,a as u}from"./index-D73BOjMJ.js";import{A as h}from"./I3SMeshView3D-Cmf0pCBX.js";import{l as g}from"./LayerView3D-DzzEkpIT.js";import{y}from"./LayerView-BJqkRDZN.js";import"./Transform-Cdl6MW9r.js";import"./RenderTexture-C5ypYJyA.js";import"./I3SOverrides-CyZiRJaU.js";import"./I3SNode-D8zAmKSG.js";import"./I3SUtil-CHzjxjgC.js";import"./I3SBinaryReader-_QKItBR2.js";import"./meshFeatureSet-DqWW_tee.js";import"./Mesh-CI02dd0Z.js";import"./MeshTransform-0gjPvzZS.js";import"./vertexSpaceConversion-BWhzUpWN.js";import"./External-CkijFDLs.js";import"./infoFor3D-DsOdlPuA.js";import"./FeatureLayerView3D-Cukekbpx.js";import"./FeatureLayerViewBase3D-Bil2-nfI.js";import"./HeatmapDensity.glsl-CZbNTFCB.js";import"./timeSupport-CYN0pHZ-.js";import"./projectExtentUtils-C47nKQvg.js";import"./dehydratedFeatureComparison-CCD_HHef.js";import"./queryForSymbologySnapping-B3Lqivqe.js";import"./hash-CcEbRgUF.js";import"./Graphics3DObjectStates-DUOG6W0Q.js";import"./optimizedFeatureQueryEngineAdapter-D1_Hg00R.js";import"./PooledRBush-5SHLoQj-.js";import"./quickselect-Be3qeUWT.js";import"./popupUtils-vK6WS1vu.js";import"./QueryEngine-JpPxW1vV.js";import"./WhereClause-DY5PWdE3.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-CTDe3LlQ.js";import"./utils-BQjMcesM.js";import"./utils-CIEqStM_.js";import"./ClassBreaksDefinition-CDXK2bj-.js";import"./FeatureStore-DgkYqg5A.js";import"./BoundsStore-DgikpXDl.js";import"./WorkerHandle-e_0USNL9.js";import"./EventedSet-DeS_kaNA.js";import"./RefreshableLayerView-DdcYLH0Z.js";import"./SceneModification-BY4GLrE8.js";import"./SceneLayerWorker-bZ3gq-Qd.js";import"./makeScheduleFunction-CggzEh3c.js";const v=.2;let t=class extends h(g(y)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this._needsNormals=!n("disable-feature:im-shading"),this.drapeTargetType=l.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var r;return((r=this._controller)==null?void 0:r.updatingProgress)??0}get lodFactor(){var r,o,a,s;return((s=(a=(o=(r=this.view)==null?void 0:r.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?v:1}get visibleAtCurrentScale(){return m(this.i3slayer.effectiveScaleRange,this.view.terrainScale)}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){return new d({layer:this.layer,sourceLayer:this.layer})}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const r=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>r,()=>this._modifications=r.toArray(),p),"modifications")}};e([i()],t.prototype,"layer",void 0),e([i()],t.prototype,"i3slayer",null),e([i(c)],t.prototype,"updatingProgress",void 0),e([i()],t.prototype,"updatingProgressValue",null),e([i()],t.prototype,"lodFactor",null),e([i({readOnly:!0})],t.prototype,"progressiveLoadFactor",null),e([i({readOnly:!0})],t.prototype,"visibleAtCurrentScale",null),t=e([u("esri.views.3d.layers.IntegratedMeshLayerView3D")],t);const nt=t;export{nt as default};
