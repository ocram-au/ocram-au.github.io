import{dv as n,dA as l,dB as m,P as p,E as d,e,y as i,c8 as u,a as c}from"./index-BR4NftXd.js";import{A as h}from"./I3SMeshView3D-3vHTp_1h.js";import{l as g}from"./LayerView3D-ClhwmUb7.js";import{y}from"./LayerView-BbzkPf80.js";import"./Transform-DWKcw_MT.js";import"./RenderTexture-BDwAOQ7g.js";import"./I3SOverrides-D9WjcAHk.js";import"./I3SNode-Cf42OZ9K.js";import"./I3SUtil-C64oFVtq.js";import"./I3SBinaryReader-B977TH2t.js";import"./meshFeatureSet-Byr7ODhw.js";import"./Mesh-D-yGIMyQ.js";import"./MeshTransform-yA_qM52G.js";import"./vertexSpaceConversion-SAr67LY1.js";import"./External-C4LWfCXR.js";import"./infoFor3D-DoIvrFnw.js";import"./FeatureLayerView3D-Cu3SYLGu.js";import"./FeatureLayerViewBase3D-C31QDd7Q.js";import"./HeatmapDensity.glsl-DSI5Y9E7.js";import"./timeSupport-C3m6RHca.js";import"./projectExtentUtils-Ca-kzp5-.js";import"./dehydratedFeatureComparison-uYXh6R_u.js";import"./queryForSymbologySnapping-4fieQxNc.js";import"./hash-CcEbRgUF.js";import"./Graphics3DObjectStates-2ygFjuhA.js";import"./optimizedFeatureQueryEngineAdapter-CpEikT-I.js";import"./PooledRBush-Bycpezie.js";import"./quickselect-wV9F2gef.js";import"./popupUtils-CA81hkek.js";import"./QueryEngine-DX0ErlHu.js";import"./WhereClause-Bc9nOJI7.js";import"./json-Wa8cmqdu.js";import"./QueryEngineCapabilities-CTDe3LlQ.js";import"./utils-Cs4RUxG6.js";import"./utils-C_DBeO1r.js";import"./ClassBreaksDefinition-KoeLTP4-.js";import"./FeatureStore-Ci3oP3sD.js";import"./BoundsStore-CyeBP8s7.js";import"./WorkerHandle-5-NXw5Wb.js";import"./EventedSet-DLxAnpai.js";import"./RefreshableLayerView-C9gOhudR.js";import"./SceneModification-2Ez4Wpe2.js";import"./SceneLayerWorker-CxQ3wybq.js";import"./makeScheduleFunction-CggzEh3c.js";const f=.2;let t=class extends h(g(y)){constructor(){super(...arguments),this.type="integrated-mesh-3d",this._elevationContext="im",this._isIntegratedMesh=!0,this._supportsLabeling=!1,this._needsNormals=!n("disable-feature:im-shading"),this.drapeTargetType=l.WithoutRasterImage}get i3slayer(){return this.layer}get updatingProgressValue(){var r;return((r=this._controller)==null?void 0:r.updatingProgress)??0}get lodFactor(){var r,o,a,s;return((s=(a=(o=(r=this.view)==null?void 0:r.qualitySettings)==null?void 0:o.sceneService)==null?void 0:a.integratedMesh)==null?void 0:s.lodFactor)??1}get progressiveLoadFactor(){return this.lodFactor>=1?f:1}get visibleAtCurrentScale(){return m(this.i3slayer.effectiveScaleRange,this.view.terrainScale)}get layerPopupEnabledAndHasTemplate(){return!1}initialize(){this._updatingHandles.add(()=>this.layer.modifications,()=>this._loadModifications(),p),this.view.basemapTerrain.overlayManager.registerDrapeTarget(this)}destroy(){this.view.basemapTerrain.overlayManager.unregisterDrapeTarget(this)}_createLayerGraphic(){return new d({layer:this.layer,sourceLayer:this.layer})}canResume(){return super.canResume()&&(!this._controller||this._controller.rootNodeVisible)}_loadModifications(){if(this.removeHandles("modifications"),this.layer.modifications==null)return void(this._modifications=[]);const r=this.layer.modifications;this.addHandles(this._updatingHandles.addOnCollectionChange(()=>r,()=>this._modifications=r.toArray(),p),"modifications")}};e([i()],t.prototype,"layer",void 0),e([i()],t.prototype,"i3slayer",null),e([i(u)],t.prototype,"updatingProgress",void 0),e([i()],t.prototype,"updatingProgressValue",null),e([i()],t.prototype,"lodFactor",null),e([i({readOnly:!0})],t.prototype,"progressiveLoadFactor",null),e([i({readOnly:!0})],t.prototype,"visibleAtCurrentScale",null),t=e([c("esri.views.3d.layers.IntegratedMeshLayerView3D")],t);const nt=t;export{nt as default};
