import{c1 as N,hM as L,h as ee,lZ as D,l_ as te,e as v,P as V,l$ as ie,u as g,bN as R,as as $,iy as se,R as C,az as ne,ep as k,a0 as ae,m0 as re,eq as W,m1 as oe,aE as I,at as le,e4 as T,m2 as E,dk as P,ar as pe,iC as ue,hT as he,m5 as me,m6 as ce,r as s,m as n,a as x,j2 as q,A as de,j4 as ge,mb as S,w as ve,dm as ye,m8 as we,is as _e,iu as U,aL as fe,m9 as z,ma as G}from"./index-BGUxYM9l.js";import{geodesicLength as Me,geodesicDensify as be,planarLength as Le}from"./geometryEngine-DEWZpdAD.js";import{d as $e}from"./SnappingVisualizer2D-BUiRLUg2.js";import{l as Se}from"./Draw-BOqLm49X.js";import{E as H,p as Oe,P as Ce}from"./EditGeometryOperations-ChD0Qg6_.js";import{n as xe,p as Ae,E as De,f as Re}from"./InteractiveToolBase-pyVEGVSl.js";import{S as ke}from"./GraphicManipulator-DJ98v1SG.js";import{e as Ie}from"./SnappingContext-CI0swYrf.js";import{f as Te}from"./SnappingDragPipelineStep-BplOt8wY.js";import{p as Ee,u as Pe}from"./MeasurementWidgetContent-D7q_OkeN.js";import"./geometryEngineBase-B0ZyeKAX.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./hydrated-Du69Np28.js";import"./SnappingOperation-BoxxIQA5.js";import"./surfaceCoordinateSystems-DNwxd-4U.js";import"./dehydratedFeatureComparison-CySjiUjT.js";import"./mat2df64-C5HCLMgl.js";import"./drapedUtils-jHbHt_op.js";import"./PointSnappingHint-Ctr5WxjY.js";const O=1e5;let h=class extends xe{constructor(e){super(e),this._measurementLayer=new L({internal:!0,listMode:"hide",visible:!1}),this._manipulatorLayer=new L({internal:!0,listMode:"hide",visible:!1}),this._snappingLayer=new L({internal:!0,listMode:"hide",visible:!1}),this._updatingHandles=new ee,this._vertices=[],this._drawActive=!1,this.measurement=null,this.measurementLabel=null}initialize(){D("esri/core/t9n/Units").then(t=>{this.messages=t});const e=this.view;this._draw=new Se({view:e}),e.map.addMany([this._measurementLayer,this._manipulatorLayer,this._snappingLayer]),e.focus(),this.addHandles([te(async()=>{this.messages=await D("esri/core/t9n/Units")}),v(()=>[this.unit,this.messages],()=>{this._updatePolylines()},V),v(()=>[this.view.effectiveTheme.accentColor,this.view.effectiveTheme.textColor],()=>{if(!this._vertices.length)return;const t=this._vertices.map(({coord:i})=>i);for(const{handle:i}of this._vertices)i.remove();this._vertices=[],this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._snappingLayer.removeAll(),this.manipulators.removeAll(),this._updateSketch(t)})]),ie(this)}destroy(){const{map:e}=this.view;this._draw.view=null,this._draw=g(this._draw),e.removeMany([this._measurementLayer,this._manipulatorLayer,this._snappingLayer]),this._measurementLayer.removeAll(),this._manipulatorLayer.removeAll(),this._snappingLayer.removeAll(),this._set("measurement",null),this._set("measurementLabel",null),this._measurementLayer=g(this._measurementLayer),this._manipulatorLayer=g(this._manipulatorLayer),this._snappingLayer=g(this._snappingLayer),this._updatingHandles=g(this._updatingHandles),this._resetVertices()}get cursor(){return this._drawActive?"crosshair":null}set editable(e){this._set("editable",e),e||this._draw.reset()}get snappingOptions(){return this.snappingManager.options}get updating(){return this._updatingHandles.updating||this.snappingManager.updating}onActivate(){this._drawActive||this._vertices.length!==0||this._startSketch()}onShow(){this._measurementLayer.visible=!0,this._manipulatorLayer.visible=!0,this._snappingLayer.visible=!0}onHide(){this._measurementLayer.visible=!1,this._manipulatorLayer.visible=!1,this._snappingLayer.visible=!1}_getSnappingContext(e){return new Ie({elevationInfo:{mode:"on-the-ground",offset:0},pointer:e,editGeometryOperations:new H(new Oe("point",Ce(!1,!1,this.view.spatialReference)),R.Local),visualizer:new $e(this._snappingLayer)})}_resetVertices(){for(const{handle:e}of this._vertices)e.remove();this._vertices=[]}_startSketch(){this._drawActive=!0;const{snappingManager:e}=this,t=this._draw.create("polyline",{mode:"click",snappingManager:e});t.on(["vertex-add","vertex-update","vertex-remove","cursor-update","undo","redo"],i=>this._updateSketch(i.vertices)),t.on("draw-complete",()=>{this._stopSketch()})}_stopSketch(){this.manipulators.forEach(({manipulator:e})=>{e.interactive=!0}),this._drawActive=!1,this.finishToolCreation()}_updateSketch(e){const{spatialReference:t}=this.view;for(;this._vertices.length>e.length;){const{handle:r,manipulator:c}=this._vertices.pop();r.remove(),this.manipulators.remove(c)}for(let r=this._vertices.length;r<e.length;r++){const[c,d]=e[r],y=new $({x:c,y:d,spatialReference:t}),w=Ue(y,this.view,this._manipulatorLayer);this.manipulators.add(w);const f=H.fromGeometry(y,R.Local),Z=[f.on("vertex-update",M=>{const _=M.vertices.at(0);_&&(this._vertices[r].coord=[_.pos[0],_.pos[1]],this._updatePolylines())}),Ae(w,(M,_,je,F)=>{const J=this._getSnappingContext(F),{snappingManager:Q}=this,X=this._updatingHandles,{snappingStep:Y}=Te({snappingContext:J,snappingManager:Q,updatingHandles:X});_.next(De(this.view)).next(b=>{if(b.action==="start"){const A=new $(b.mapStart);M.graphic.geometry=A,f.trySetGeometry(A)}return b}).next(...Y).next(Re({operations:f})).next(()=>{M.graphic.geometry=f.data.geometry})})];this._vertices.push({manipulator:w,coord:[c,d],handle:se(Z)})}const i=this._vertices.length-1,a=this._vertices[i],[o,l]=e[i];a.coord[0]===o&&a.coord[1]===l||(a.coord=[o,l],a.manipulator.graphic.geometry=new $({x:o,y:l,spatialReference:t}));const u=this._drawActive?this._vertices[i].manipulator:null;this.manipulators.forEach(({manipulator:r})=>{r.interactive=u==null||r!==u}),this._updatePolylines()}_updatePolylines(){var y;if(this._vertices.length<2)return void this._measurementLayer.removeAll();const e=this._vertices.map(({coord:w})=>w),{measurement:t,drawing:i,original:a}=ze(e,this.view.spatialReference);this._set("measurement",t);const o=Be(this.messages,t,this.unit);let l,u;this._set("measurementLabel",o);const{graphics:r}=this._measurementLayer,c=r.length===2,{effectiveTheme:d}=this.view;c?(l=r.at(0),u=r.at(1)):(l=new C({symbol:new ne({data:{type:"CIMSymbolReference",symbol:{type:"CIMLineSymbol",symbolLayers:[{type:"CIMSolidStroke",effects:[{type:"CIMGeometricEffectDashes",dashTemplate:[14,12],lineDashEnding:"FullGap",controlPointEnding:"NoConstraint"}],enable:!0,capStyle:"Butt",joinStyle:"Round",width:3.5,color:k(d.accentColor).toArray()},{type:"CIMSolidStroke",enable:!0,capStyle:"Butt",joinStyle:"Round",width:5,color:d.accentColor.toArray()}]}}})}),u=new C({symbol:new ae({color:d.textColor,haloColor:W(k(d.textColor,oe.Low),.5),haloSize:2,font:new re({size:14,family:"sans-serif"})})}),r.removeAll(),r.addMany([l,u])),l.geometry=i,u.geometry=(y=a.extent)==null?void 0:y.center,u.symbol.text=o}};function Ue(e,t,i){const a=W(t.effectiveTheme.accentColor,.5),o={type:"simple-line",width:0},l=8,u=new I({style:"circle",color:a,size:l,outline:o}),r=new I({style:"circle",color:a,size:1.5*l,outline:o}),c=new C({geometry:e,symbol:u});return new ke({view:t,layer:i,graphic:c,focusedSymbol:r})}function ze(e,t){const i=new le({paths:[e],spatialReference:t});let a,o;if(t.isGeographic)if(N(t))a=T([i],"meters")[0],o=E(i,O);else{const l=P(i,pe.WGS84),u=E(l,O);a=T([l],"meters")[0],o=P(u,t)}else t.isWebMercator?(a=Me(i,"meters"),o=be(i,O,"meters")):(a=Le(i,"meters"),o=i);return{measurement:{geometry:o,length:a},original:i,drawing:o}}function Ge(e){return e!=null}function He(e){if(!e)return!1;const{isGeographic:t,isWebMercator:i,isWGS84:a}=e;return t&&!a&&!N(e)||!t&&!i}function Be(e,t,i){if(!t||!e)return"";switch(i){case"metric":return ce(e,t.length,"meters");case"imperial":return me(e,t.length,"meters");default:return ue(e,he(t.length,"meters",i),i)}}s([n()],h.prototype,"_drawActive",void 0),s([n({readOnly:!0})],h.prototype,"cursor",null),s([n({value:!0})],h.prototype,"editable",null),s([n({readOnly:!0})],h.prototype,"measurement",void 0),s([n({readOnly:!0})],h.prototype,"measurementLabel",void 0),s([n()],h.prototype,"messages",void 0),s([n({constructOnly:!0})],h.prototype,"snappingManager",void 0),s([n()],h.prototype,"unit",void 0),s([n()],h.prototype,"updating",null),s([n({constructOnly:!0})],h.prototype,"view",void 0),h=s([x("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DTool")],h);let m=class extends Ee{constructor(e){super(e),this.supportedViewType="2d",this.unsupportedErrorMessage="DistanceMeasurement2DViewModel is only supported in 2D views.",this._snappingManager=null,this.snappingOptions=new q}initialize(){this.addHandles([v(()=>{var e;return(e=this.view)==null?void 0:e.spatialReference},()=>this.clear()),v(()=>this.unit,e=>{this.tool&&(this.tool.unit=e)},V),v(()=>this.view,e=>{this._snappingManager=g(this._snappingManager),e&&(this._snappingManager=new ge({view:e,options:this.snappingOptions}))},de),v(()=>this.snappingOptions,e=>{this._snappingManager&&e&&(this._snappingManager.options=e)})])}destroy(){this._snappingManager=g(this._snappingManager)}get measurement(){var e;return((e=this.tool)==null?void 0:e.measurement)??null}get measurementLabel(){var e;return((e=this.tool)==null?void 0:e.measurementLabel)??null}get state(){var e;return this.disabled||this.view==null||!Ge((e=this.view)==null?void 0:e.spatialReference)?"disabled":this.tool!=null&&this.measurement?this.tool.active?"measuring":"measured":"ready"}get unit(){return this._validateUnit(this.defaultUnit)}set unit(e){this._overrideIfSome("unit",this._validateUnit(e))}get unitOptions(){return S}set unitOptions(e){this._overrideIfSome("unitOptions",this._validateUnits(e))}async start(){const e=this.view;e!=null&&(await ve(()=>e.ready),He(e.spatialReference)&&await ye()),this.createTool({interactive:!0})}clear(){this.removeTool()}constructTool(){return new h({snappingManager:this._snappingManager,unit:this.unit,view:this.view,visible:this.visible})}_validateUnit(e){const{unitOptions:t,defaultUnit:i}=this;return e!=null&&t.includes(e)?e:t.includes(i)?i:t.length>0?t[0]:i}_validateUnits(e){if(e==null)return[];const t=e.filter(i=>S.includes(i));return t.length===0?S.slice():t}};s([n()],m.prototype,"_snappingManager",void 0),s([n(we)],m.prototype,"defaultUnit",void 0),s([n({readOnly:!0})],m.prototype,"measurement",null),s([n({readOnly:!0})],m.prototype,"measurementLabel",null),s([n({type:q,nonNullable:!0})],m.prototype,"snappingOptions",void 0),s([n({readOnly:!0})],m.prototype,"state",null),s([n({type:String})],m.prototype,"unit",null),s([n({type:[String]})],m.prototype,"unitOptions",null),m=s([x("esri.widgets.DistanceMeasurement2D.DistanceMeasurement2DViewModel")],m);const K=m,B="esri-distance-measurement-2d",j={base:B,newMeasurementButton:`${B}__clear-button`};let p=class extends _e{constructor(e,t){super(e,t),this.messages=null,this.messagesCommon=null,this.viewModel=new K}get active(){return this.viewModel.active}get icon(){return"measure-line"}set icon(e){this._overrideIfSome("icon",e)}get label(){var e;return((e=this.messages)==null?void 0:e.widgetLabel)??""}set label(e){this._overrideIfSome("label",e)}get snappingOptions(){return this.viewModel.snappingOptions}set snappingOptions(e){this.viewModel.snappingOptions=e}get unit(){return this.viewModel.unit}set unit(e){this.viewModel.unit=e}get unitOptions(){return this.viewModel.unitOptions}set unitOptions(e){this.viewModel.unitOptions=e}get view(){return this.viewModel.view}set view(e){this.viewModel.view=e}get visible(){return this.viewModel.visible}set visible(e){this.viewModel.visible=e}render(){const{messages:e,messagesCommon:t,unit:i,unitOptions:a,viewModel:o}=this,{active:l,measurementLabel:u,state:r,supported:c}=o;return U("div",{"aria-label":this.messages.widgetLabel,class:this.classes(j.base,z.widget,z.panel),key:this,role:"presentation"},this.visible?U(Pe,{active:l,measurementItems:[{key:"distance",title:e.distance,value:u}],messages:{...e,notApplicable:t.notApplicable},newMeasurementButtonClass:j.newMeasurementButton,state:r,supported:c,unit:i,unitOptions:a,onNewMeasurementClick:()=>{fe(this.viewModel.start())},onUnitChange:d=>{this.unit=d}}):null)}};s([n({readOnly:!0})],p.prototype,"active",null),s([n()],p.prototype,"icon",null),s([n()],p.prototype,"label",null),s([n(),G("esri/widgets/DistanceMeasurement2D/t9n/DistanceMeasurement2D")],p.prototype,"messages",void 0),s([n(),G("esri/t9n/common")],p.prototype,"messagesCommon",void 0),s([n()],p.prototype,"snappingOptions",null),s([n()],p.prototype,"uiStrings",void 0),s([n()],p.prototype,"unit",null),s([n()],p.prototype,"unitOptions",null),s([n()],p.prototype,"view",null),s([n({type:K})],p.prototype,"viewModel",void 0),s([n({type:Boolean})],p.prototype,"visible",null),p=s([x("esri.widgets.DistanceMeasurement2D")],p);const lt=p;export{lt as default};
