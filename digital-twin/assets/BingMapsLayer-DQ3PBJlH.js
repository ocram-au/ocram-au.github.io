import{gO as b,cl as m,cn as w,ct as h,gP as e,ar as y,as as v,da as M,F as l,N as c,gQ as f,r as s,m as o,a as S}from"./index-BGUxYM9l.js";const d=new M({BingMapsAerial:"aerial",BingMapsRoad:"road",BingMapsHybrid:"hybrid"}),j="https://dev.virtualearth.net";let r=class extends b(m(w(f))){constructor(t){super(t),this.type="bing-maps",this.tileInfo=new h({size:[256,256],dpi:96,origin:new v({x:-20037508342787e-6,y:20037508342787e-6,spatialReference:y.WebMercator}),spatialReference:y.WebMercator,lods:[new e({level:1,resolution:78271.5169639999,scale:295828763795777e-6}),new e({level:2,resolution:39135.7584820001,scale:147914381897889e-6}),new e({level:3,resolution:19567.8792409999,scale:73957190948944e-6}),new e({level:4,resolution:9783.93962049996,scale:36978595474472e-6}),new e({level:5,resolution:4891.96981024998,scale:18489297737236e-6}),new e({level:6,resolution:2445.98490512499,scale:9244648868618e-6}),new e({level:7,resolution:1222.99245256249,scale:4622324434309e-6}),new e({level:8,resolution:611.49622628138,scale:2311162217155e-6}),new e({level:9,resolution:305.748113140558,scale:1155581108577e-6}),new e({level:10,resolution:152.874056570411,scale:577790.554289}),new e({level:11,resolution:76.4370282850732,scale:288895.277144}),new e({level:12,resolution:38.2185141425366,scale:144447.638572}),new e({level:13,resolution:19.1092570712683,scale:72223.819286}),new e({level:14,resolution:9.55462853563415,scale:36111.909643}),new e({level:15,resolution:4.77731426794937,scale:18055.954822}),new e({level:16,resolution:2.38865713397468,scale:9027.977411}),new e({level:17,resolution:1.19432856685505,scale:4513.988705}),new e({level:18,resolution:.597164283559817,scale:2256.994353}),new e({level:19,resolution:.298582141647617,scale:1128.497176}),new e({level:20,resolution:.1492910708238085,scale:564.248588})]}),this.key=null,this.style="road",this.culture="en-US",this.region=null,this.portalUrl=null,this.hasAttributionData=!0}get bingMetadata(){return this._get("bingMetadata")}set bingMetadata(t){this._set("bingMetadata",t)}get copyright(){return this.bingMetadata!=null?this.bingMetadata.copyright:null}get operationalLayerType(){return d.toJSON(this.style)}get bingLogo(){return this.bingMetadata!=null?this.bingMetadata.brandLogoUri:null}load(t){return this.key?this.addResolvingPromise(this._getMetadata()):this.portalUrl?this.addResolvingPromise(this._getPortalBingKey().then(()=>this._getMetadata())):this.addResolvingPromise(Promise.reject(new l("bingmapslayer:load","Bing layer must have bing key."))),Promise.resolve(this)}getTileUrl(t,a,n){if(!this.loaded||this.bingMetadata==null)return null;const i=this.bingMetadata.resourceSets[0].resources[0],u=i.imageUrlSubdomains[a%i.imageUrlSubdomains.length],g=this._getQuadKey(t,a,n);return i.imageUrl.replace("{subdomain}",u).replace("{quadkey}",g)}async fetchAttributionData(){return this.load().then(()=>this.bingMetadata==null?null:{contributors:this.bingMetadata.resourceSets[0].resources[0].imageryProviders.map(t=>({attribution:t.attribution,coverageAreas:t.coverageAreas.map(a=>({zoomMin:a.zoomMin,zoomMax:a.zoomMax,score:1,bbox:[a.bbox[0],a.bbox[1],a.bbox[2],a.bbox[3]]}))}))})}_getMetadata(){const t={road:"roadOnDemand",aerial:"aerial",hybrid:"aerialWithLabelsOnDemand"}[this.style];return c(`${j}/REST/v1/Imagery/Metadata/${t}`,{responseType:"json",query:{include:"ImageryProviders",uriScheme:"https",key:this.key,suppressStatus:!0,output:"json",culture:this.culture,userRegion:this.region}}).then(a=>{const n=a.data;if(n.statusCode!==200)throw new l("bingmapslayer:getmetadata",n.statusDescription);if(this.bingMetadata=n,this.bingMetadata.resourceSets.length===0)throw new l("bingmapslayer:getmetadata","no bing resourcesets");if(this.bingMetadata.resourceSets[0].resources.length===0)throw new l("bingmapslayer:getmetadata","no bing resources")}).catch(a=>{throw new l("bingmapslayer:getmetadata",a.message)})}_getPortalBingKey(){return c(this.portalUrl??"",{responseType:"json",authMode:"no-prompt",query:{f:"json"}}).then(t=>{if(!t.data.bingKey)throw new l("bingmapslayer:getportalbingkey","The referenced Portal does not contain a valid bing key");this.key=t.data.bingKey}).catch(t=>{throw new l("bingmapslayer:getportalbingkey",t.message)})}_getQuadKey(t,a,n){let i="";for(let u=t;u>0;u--){let g=0;const p=1<<u-1;n&p&&(g+=1),a&p&&(g+=2),i+=g.toString()}return i}};s([o({json:{read:!1,write:!1},value:null})],r.prototype,"bingMetadata",null),s([o({json:{read:!1,write:!1},value:"bing-maps",readOnly:!0})],r.prototype,"type",void 0),s([o({type:h})],r.prototype,"tileInfo",void 0),s([o({type:String,readOnly:!0,json:{read:!1,write:!1}})],r.prototype,"copyright",null),s([o({type:String,json:{write:!1,read:!1}})],r.prototype,"key",void 0),s([o({type:d.apiValues,nonNullable:!0,json:{read:{source:"layerType",reader:d.read}}})],r.prototype,"style",void 0),s([o({type:["BingMapsAerial","BingMapsHybrid","BingMapsRoad"]})],r.prototype,"operationalLayerType",null),s([o({type:String,json:{write:!1,read:!1}})],r.prototype,"culture",void 0),s([o({type:String,json:{write:!1,read:!1}})],r.prototype,"region",void 0),s([o({type:String,json:{write:!0,read:!0}})],r.prototype,"portalUrl",void 0),s([o({type:Boolean,json:{write:!1,read:!1}})],r.prototype,"hasAttributionData",void 0),s([o({type:String,readOnly:!0})],r.prototype,"bingLogo",null),r=s([S("esri.layers.BingMapsLayer")],r);const k=r;export{k as default};
