const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/imageryUtils-DSsbcHlJ.js","assets/utils-DIjKOTJz.js","assets/index--YEV5yv0.js","assets/index-DvOju5Xs.css"])))=>i.map(i=>d[i]);
import{ar as E,aN as U,T as Ne,vs as $e,vt as Ee,r as R,m as O,a as W,lS as _e,F,hS as Oe,dc as me,vu as Be,c$ as De,ch as Ae,ct as re,nR as Le,ex as Je,as as H,k as ge,gO as ze,gZ as Ue,cl as je,cm as Ge,hb as He,hy as We,ck as Ve,gY as qe,cn as Ye,ei as Xe,a6 as Ke,aM as Ze,M as Qe,jx as et,aq as tt,h9 as te,e as st,_ as at,g_ as it,jC as rt,dV as Se}from"./index--YEV5yv0.js";import{X as K,i as ue,t as J,n as Fe,e as L,o as G,u as se,K as nt,a as ot}from"./xmlUtilities-DI3M4vFw.js";import{c as lt,f as ct,o as ut}from"./RasterPresetRendererMixin-CfpGQe5x.js";import{o as ht,c as ft,v as pt,d as dt,$ as mt,p as gt,t as yt,b as xt}from"./rasterFieldUtils-YkXXOCZM.js";import{b as wt,N as It,w as Ce}from"./ImageHistogramParameters-8W-viCv4.js";import{g as ne,E as bt,d as le,W as vt,h as St,m as Me,p as xe,b as Tt,T as Rt,n as we,r as _t,c as Te,F as Ot,N as Ft,e as Ct,i as ae,B as Mt,L as kt,k as Pt,o as Nt}from"./dataUtils-CrszwfhT.js";import{y as Ie,c as $t}from"./PolynomialTransform-B6l42VSK.js";import{T as Et}from"./TilemapCache-M7pCEPf1.js";import{w as Bt,T as Dt}from"./rasterFunctionHelper-CWqPvOxF.js";import"./QueueProcessor-VuG9qUxg.js";import"./rasterProjectionHelper-DGbYMmOE.js";import"./ClassBreaksDefinition-Cvhy7Kh5.js";import"./_commonjsHelpers-DCkdB7M8.js";function ke(t){return["x","e","east","long","longitude"].includes(t.toLowerCase())}function Pe(t){return["y","n","west","lat","latitude"].includes(t.toLowerCase())}function At(t){const{axes:e}=t.domain,s=Object.keys(e),a=[],i=[];let n=-1,r=-1,l=[];for(let x=0;x<s.length;x++){const b=s[x];ke(b)?n=x:Pe(b)&&(r=x);const I=e[b],v=[];if("values"in I){I.values.forEach(S=>v.push(typeof S=="string"?new Date(S).getTime():S));const T=v[1]-v[0];a.push([v[0]-.5*T,v[v.length-1]+.5*T]),i.push(T)}else{const{start:T,stop:S,num:C}=I,w=(S-T)/(C-1);a.push([T-.5*w,S+.5*w]),i.push(w);for(let M=0;M<C;M++)v.push(T+w*M)}l.push({name:b,values:v,extent:[v[0],v[v.length-1]]})}n>-1&&r===-1?r=n===0?1:0:r>-1&&n===-1?n=r===0?1:0:r===-1&&n===-1&&(n=0,r=1),l=l.filter((x,b)=>!(b===n||b===r));const{referencing:o}=t.domain,c=o.find(x=>x.coordinates.includes(s[n])).system.id,u=c==null?void 0:c.slice(c.lastIndexOf("/")+1),f=u==null||u==="CRS84"?4326:Number(u),p=new E({wkid:f}),[h,y]=a[n],[m,d]=a[r],g=new U({xmin:h,xmax:y,ymin:m,ymax:d,spatialReference:p});return{width:Math.round(g.width/i[n]),height:Math.round(g.height/i[r]),extent:g,dimensions:l}}function he(t){const e=Ee();return e?t[e]??Object.values(t)[0]:Object.values(t)[0]}function fe(){return Math.round(255*Math.random())}function Lt(t){var a,i;const e={},{parameters:s}=t;if(!s)return e;for(const[n,r]of Object.entries(s)){const{type:l,description:o,unit:c,categoryEncoding:u,observedProperty:f}=r;if(l==="Parameter"&&(e[n]={},o&&(e[n].description=he(o)),c&&(e[n].unit=c.label?he(c.label):null,e[n].symbol=(a=c.symbol)==null?void 0:a.value),u)){const p=Object.entries(u).map((m,d)=>({OID:d,Value:Number(m[1]),ClassName:m[0].slice(m[0].lastIndexOf("/")+1),Count:1}));let h=!1;(i=f==null?void 0:f.categories)!=null&&i.length&&(f.categories.forEach(m=>{if(!m.id)return;const d=m.id.slice(m.id.lastIndexOf("/")+1),g=p.find(b=>b.ClassName===d);if(!g)return;const x=m.label?he(m.label):null;if(g.Label=x,m.preferredColor){const b=Ne.fromHex(m.preferredColor);b&&(h=!0,g.Red=b.r,g.Green=b.g,g.Blue=b.b)}}),h&&p.forEach(m=>{m.Red==null&&(m.Red=fe(),m.Green=fe(),m.Blue=fe())}));const y={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:p.map(m=>({attributes:m}))};h&&y.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[n].attributeTable=y}}return e}function Jt(t){let e=Number.MAX_VALUE,s=-Number.MAX_VALUE;for(let a=0;a<t.length;a++){const i=t[a];i!=null&&(i<e&&(e=i),i>s&&(s=i))}return $e(e,s)}function zt(t,e,s){const a=t.map((o,c)=>({name:o,count:e[c]})).sort((o,c)=>o.name>c.name?-1:1),i=(n=1,o=>n*=o.count);var n;const r=[...a.slice(1),{name:"",count:1}].reverse().map(i).reverse();let l=0;for(let o=t.length-1;o>=0;o--)l+=r[a.findIndex(({name:c})=>c===t[o])]*(s%e[o]),s=Math.floor(s/e[o]);return l}function Ut(t){var p;const{width:e,height:s,extent:a,dimensions:i}=At(t),{ranges:n}=t,r=Object.keys(n).sort((h,y)=>h<y?-1:1),l=[];for(let h=0;h<r.length;h++){const y=r[h];i!=null&&i.length&&l.push({name:y,dimensions:i})}const o=Lt(t);l.forEach(h=>o[h.name]&&Object.assign(h,o[h.name]));const c=l.length?{variables:l}:void 0,u=[];for(let h=0;h<r.length;h++){const y=r[h],{values:m,dataType:d,axisNames:g,shape:x}=n[y],b=x.length>2?h*x.slice(0,-2).reduce((w,M)=>w*M):0,I=g.slice(0,-2),v=x.slice(0,-2),T=d==="float"?"f32":Jt(m),S=e*s,C=m.length/S;for(let w=0;w<C;w++){const M=ne.createEmptyBand(T,S),_=new Uint8Array(S).fill(255);let k=!1;const V=w*S;for(let P=0;P<S;P++){const B=m[V+P];B==null?(_[P]=0,k=!0):M[P]=B}if(h===0||i!=null&&i.length){const P=new ne({width:e,height:s,mask:k?_:null,pixels:[M],pixelType:T});P.updateStatistics(),(i==null?void 0:i.length)?u[zt(I,v,w)+b]=P:u.push(P)}else{const P=u[w];P.pixels.push(M),k?P.mask&&(P.mask=ne.combineBandMasks([P.mask,_])):P.mask=k?_:null}}}const f=(p=Object.values(o).find(h=>h.attributeTable))==null?void 0:p.attributeTable;return{extent:a,pixelBlocks:u,multidimensionalInfo:c,attributeTable:f,bandNames:c?void 0:r}}let Y=class extends K{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(t,e,s,a={}){if(!this._pixelBlockTiles){const{rasterInfo:n}=this,[r,l]=n.storageInfo.tileInfo.size,{sliceId:o}=a,{pixelBlocks:c}=this.source,u={pixelBlock:o==null?c[0]:c[o],useBilinear:n.dataType!=="thematic",tileSize:{width:r,height:l},level:t,row:e,col:s},f=this.rasterJobHandler?this.rasterJobHandler.clipTile(u,a):bt(u);return Promise.resolve(f)}const i=this._pixelBlockTiles.get(`${t}/${e}/${s}`);return Promise.resolve(i)}async _open(t){const e=this.source,{pixelBlocks:s,attributeTable:a,statistics:i,histograms:n,name:r,nativeExtent:l,transform:o}=e,c=s[0],{width:u,height:f,pixelType:p}=c,h=e.extent??new U({xmin:-.5,ymin:.5,xmax:u-.5,ymax:f-.5,spatialReference:new E({wkid:3857})}),y=e.isPseudoSpatialReference??!e.extent,m={x:h.width/u,y:h.height/f},d={...e.keyProperties};a&&(d.DataType="Thematic");const g=new le({width:u,height:f,pixelType:p,extent:h,nativeExtent:l,attributeTable:a,transform:o,pixelSize:m,spatialReference:h.spatialReference,bandCount:c.pixels.length,keyProperties:d,multidimensionalInfo:e.multidimensionalInfo,statistics:i,isPseudoSpatialReference:y,histograms:n});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(g),this.createRemoteDatasetStorageInfo(g,512,512),this._set("rasterInfo",g),this.updateTileInfo(),g.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,g.multidimensionalInfo):await this._buildInMemoryRaster(c,{width:512,height:512},t),g.multidimensionalInfo||(this.source=null),this.datasetName=r}async _buildInMemoryRaster(t,e,s){var f,p;const{rasterInfo:a}=this,i=a.storageInfo.maximumPyramidLevel??0,n=a.dataType!=="thematic",r=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:i,useBilinear:n},s):Promise.resolve(vt(t,e,i,n)),l=a.statistics!=null,o=a.histograms!=null,c=this.ioConfig.skipStatistics||l?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},s):Promise.resolve(St(t)),u=await _e([r,c]);if(!u[0].value&&u[1].value)throw new F("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=u[0].value,l||(a.statistics=(f=u[1].value)==null?void 0:f.statistics),o||(a.histograms=(p=u[1].value)==null?void 0:p.histograms)}async _buildMDimStats(t,e,s){for(let a=0;a<e.variables.length;a++){const i=e.variables[a];if(i.statistics)continue;const n=i.dimensions.map(c=>{var u,f;return new wt({variableName:i.name,dimensionName:c.name,values:[((u=c.values)==null?void 0:u[0])??((f=c.extent)==null?void 0:f[0])],isSlice:!0})}),r=It(n,e),l=r==null?null:t[r];if(l==null)continue;const o=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:l},s):Me(l);i.statistics=o.statistics,i.histograms||(i.histograms=o.histograms)}}};R([O({type:String,json:{write:!0}})],Y.prototype,"datasetFormat",void 0),R([O()],Y.prototype,"source",void 0),R([O()],Y.prototype,"url",null),Y=R([W("esri.layers.support.rasterDatasets.InMemoryRaster")],Y);const be=Y;let Z=class extends K{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(e,s,a,i={}){return this._inMemoryRaster.fetchRawTile(e,s,a,i)}async _open(e){const{extent:s,pixelBlocks:a,multidimensionalInfo:i,attributeTable:n,bandNames:r}=await this._fetchData(e),{statistics:l,histograms:o}=Me(a[0]),c=r==null?void 0:r.map(h=>({BandName:h})),u={DataType:n?"Thematic":i?"Scientific":"Generic",BandProperties:c},f=new be({source:{extent:s,pixelBlocks:a,attributeTable:n?Oe.fromJSON(n):null,multidimensionalInfo:i,statistics:l,histograms:o,keyProperties:u,isPseudoSpatialReference:!1}});await f.open(),this._inMemoryRaster=f;const p=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",p.slice(0,p.indexOf("."))),this._set("rasterInfo",f.rasterInfo)}async _fetchData(e){var n,r,l,o;const s=this.source??(await this.request(this.url,{signal:e==null?void 0:e.signal})).data,a="imagery-tile-layer:open-coverage-json";if(((n=s.type)==null?void 0:n.toLowerCase())!=="coverage"||((l=(r=s.domain)==null?void 0:r.domainType)==null?void 0:l.toLowerCase())!=="grid")throw new F(a,"Only coverage with Grid domain type is supported");if(!s.ranges)throw new F(a,"Missing ranges in the grid coverage data");if(!((o=s.domain.referencing)!=null&&o.length))throw new F(a,"Missing domain referencing in the grid coverage data");const i=Object.values(s.ranges);for(let c=0;c<i.length;c++){const{axisNames:u,shape:f,type:p,values:h}=i[c];if(!(p.toLowerCase()==="ndarray"&&(h!=null&&h.length)&&(u!=null&&u.length)&&(f!=null&&f.length)))throw new F(a,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!(ke(u[u.length-1])&&Pe(u[u.length-2])))throw new F(a,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return Ut(s)}};R([O({type:String,json:{write:!0}})],Z.prototype,"datasetFormat",void 0),R([O({constructOnly:!0})],Z.prototype,"source",void 0),Z=R([W("esri.layers.support.rasterDatasets.CovJSONRaster")],Z);const jt=Z;function Re(t,e){if(!t||!e)return null;const s=[];for(let a=0;a<t.length;a++)s.push(t[a]),s.push(e[a]);return s}function Gt(t){const e=L(t,"GeodataXform"),s=ce(G(e,"SpatialReference/WKID")||J(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:s,transform:null};const a=G(e,"PolynomialOrder")??1,i=se(e,"CoeffX/Double"),n=se(e,"CoeffY/Double"),r=se(e,"InverseCoeffX/Double"),l=se(e,"InverseCoeffY/Double"),o=Re(i,n),c=Re(r,l);return{spatialReference:s,transform:o&&c&&o.length&&c.length?new Ie({spatialReference:s,polynomialOrder:a,forwardCoefficients:o,inverseCoefficients:c}):null}}function Ht(t){var p;const e=G(t,"NoDataValue"),s=L(t,"Histograms/HistItem"),a=G(s,"HistMin"),i=G(s,"HistMax"),n=G(s,"BucketCount"),r=(p=J(s,"HistCounts"))==null?void 0:p.split("|").map(h=>Number(h));let l,o,c,u;Fe(t,"Metadata/MDI").forEach(h=>{const y=Number(h.textContent??h.nodeValue);switch(h.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=y;break;case"STATISTICS_MAXIMUM":o=y;break;case"STATISTICS_MEAN":c=y;break;case"STATISTICS_STDDEV":u=y}});const f=G(t,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:r!=null&&r.length&&a!=null&&i!=null?{min:a,max:i,size:n||r.length,counts:r}:null,sourceBandIndex:f,statistics:l!=null&&o!=null?{min:l,max:o,avg:c,stddev:u}:null}}function ce(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&e!==0)return new E({wkid:e});if(t=String(t).trim(),Be(t))return new E({wkt2:t});const s=t.toUpperCase();if(s.startsWith("COMPD_CS")){if(!s.includes("VERTCS")||!s.includes("GEOGCS")&&!s.startsWith("PROJCS"))return null;const a=s.indexOf("VERTCS"),i=s.indexOf("PROJCS"),n=i>-1?i:s.indexOf("GEOGCS");if(n===-1)return null;const r=t.slice(n,t.lastIndexOf("]",a)+1).trim(),l=t.slice(a,t.lastIndexOf("]")).trim();e=pe(r);const o=new E(e?{wkid:e}:{wkt:r}),c=pe(l);return c&&(o.vcsWkid=c),o}return s.startsWith("GEOGCS")||s.startsWith("PROJCS")?(e=pe(t),new E(e!==0?{wkid:e}:{wkt:t})):null}function pe(t){var i;const e=t.replaceAll("]","[").replaceAll('"',"").split("[").map(n=>n.trim()).filter(n=>n!==""),s=e[e.length-1].split(","),a=(i=s[0])==null?void 0:i.toLowerCase();if((a==="epsg"||a==="esri")&&t.endsWith('"]]')){const n=Number(s[1]);if(!isNaN(n)&&n!==0)return n}return 0}function ve(t){var a;if(((a=t==null?void 0:t.documentElement.tagName)==null?void 0:a.toLowerCase())!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach(i=>{if(i.nodeType===1){if(ue(i,"SRS")){if(!e.spatialReference){const n=J(i);e.spatialReference=ce(n)}}else if(ue(i,"Metadata"))if(i.getAttribute("domain")==="xml:ESRI"){const{spatialReference:n,transform:r}=Gt(i);e.transform=r,e.spatialReference||(e.spatialReference=n)}else Fe(i,"MDI").forEach(n=>e.metadata[n.getAttribute("key")]=J(n));else if(ue(i,"PAMRasterBand")){const n=Ht(i);n.sourceBandIndex!=null&&e.rasterBands[n.sourceBandIndex]==null?e.rasterBands[n.sourceBandIndex]=n:e.rasterBands.push(n)}}});const s=e.rasterBands;if(s.length){const i=!!s[0].statistics;e.statistics=i?s.map(r=>r.statistics).filter(me):null;const n=!!s[0].histogram;e.histograms=n?s.map(r=>r.histogram).filter(me):null}return e}let oe=class extends K{fetchRawTile(t,e,s,a={}){return this._inMemoryRaster.fetchRawTile(t,e,s,a)}async _open(t){const e=await this._fetchData(t);let{spatialReference:s,statistics:a,histograms:i,transform:n}=await this._fetchAuxiliaryData(t);const r=!s;r&&(s=new E({wkid:3857})),i!=null&&i.length&&a==null&&(a=xe(i));const{width:l,height:o}=e;let c=new U({xmin:-.5,ymin:.5-o,xmax:l-.5,ymax:.5,spatialReference:s});const u=n?n.forwardTransform(c):c;let f=!0;if(n){const h=n.forwardCoefficients;f=h&&h[1]===0&&h[2]===0,f&&(n=null,c=u)}const p=new be({source:{extent:u,nativeExtent:c,transform:n,pixelBlocks:[e],statistics:a,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:r},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(p.ioConfig.skipMapInfo=!0),await p.open(),p.source=null,this._set("rasterInfo",p.rasterInfo),this._inMemoryRaster=p}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t==null?void 0:t.signal}),s=Tt(e).toUpperCase();if(s!=="JPG"&&s!=="PNG"&&s!=="GIF"&&s!=="BMP")throw new F("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",s);const a=s.toLowerCase(),i=a==="gif"||a==="bmp"||!De("ios"),n=await this.decodePixelBlock(e,{format:a,useCanvas:i,hasNoZlibMask:!0});if(n==null)throw new F("image-aux-raster:open","the data cannot be decoded");return n}async _fetchAuxiliaryData(t){var u;const e=t==null?void 0:t.signal,{skipExtensions:s=[],skipMapInfo:a}=this.ioConfig,i=a||s.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),n=this.datasetFormat,r=n==="JPG"?"jgw":n==="PNG"?"pgw":n==="BMP"?"bpw":null,l=r&&s.includes(r)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+r,{responseType:"text",signal:e}),o=await _e([i,l]);if(e!=null&&e.aborted)throw Ae();const c=ve((u=o[0].value)==null?void 0:u.data);if(!c.transform){const f=o[1].value?o[1].value.data.split(`
`).slice(0,6).map(p=>Number(p)):null;c.transform=(f==null?void 0:f.length)===6?new Ie({forwardCoefficients:[f[4],f[5],f[0],-f[1],f[2],-f[3]]}):null}return c}};R([O({type:String,json:{write:!0}})],oe.prototype,"datasetFormat",void 0),oe=R([W("esri.layers.support.rasterDatasets.ImageAuxRaster")],oe);const ie=oe;let Q=class extends K{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(t,e,s,a={}){const{storageInfo:i,extent:n}=this.rasterInfo,{transposeInfo:r}=i,l=r!=null&&!!a.transposedVariableName;if(this._slices&&!l&&a.sliceId==null)return null;const o=l?0:i.maximumPyramidLevel-t+this._levelOffset,c=`${this.url}/tile/${o}/${e}/${s}`,u=this._slices?l?{variable:a.transposedVariableName}:{sliceId:a.sliceId||0}:null,{data:f}=await this.request(c,{query:u,responseType:"array-buffer",signal:a.signal});if(!f)return null;const p=l?r.tileSize:i.tileInfo.size,h=await this.decodePixelBlock(f,{width:p[0],height:p[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:l,noDataValue:this.rasterInfo.noDataValue});if(h==null)return null;const y=i.blockBoundary[t];if(i.compression!=="jpg"||s>y.minCol&&s<y.maxCol&&e>y.minRow&&e<y.maxRow)return h;const{origin:m,blockWidth:d,blockHeight:g}=i,{x,y:b}=this.getPyramidPixelSize(t),I=Math.round((n.xmin-m.x)/x)%d,v=Math.round((n.xmax-m.x)/x)%d||d,T=Math.round((m.y-n.ymax)/b)%g,S=Math.round((m.y-n.ymin)/b)%g||g,C=s===y.minCol?I:0,w=e===y.minRow?T:0,M=s===y.maxCol?v:d,_=e===y.maxRow?S:g;return Rt(h,{x:C,y:w},{width:M-C,height:_-w}),h}getSliceIndex(t){if(!this._slices||t==null||t.length===0)return null;const e=t;for(let s=0;s<this._slices.length;s++){const a=this._slices[s].multidimensionalDefinition;if(a.length===e.length&&!a.some(i=>{const n=e.find(r=>i.variableName===r.variableName&&r.dimensionName===i.dimensionName);return n?(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])!==(Array.isArray(n.values[0])?`${n.values[0][0]}-${n.values[0][1]}`:n.values[0]):!0}))return s}return null}async fetchVariableStatisticsHistograms(t,e){var n,r,l;const s=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then(o=>{var c;return(c=o.data)==null?void 0:c.statistics}),a=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then(o=>{var c;return(c=o.data)==null?void 0:c.histograms}),i=await Promise.all([s,a]);return i[0]&&i[0].forEach(o=>{o.avg=o.mean,o.stddev=o.standardDeviation}),(l=(r=(n=i[1])==null?void 0:n[0])==null?void 0:r.counts)!=null&&l.length||(i[1]=null),{statistics:i[0]||null,histograms:i[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let s=this.identifyPixelLocation(t,0,e.datumTransformation);if(s===null)return null;let a=0;const{maximumPyramidLevel:i}=this.rasterInfo.storageInfo;let n=i-a+this._levelOffset;const r=s.srcLocation;for(;n>=0;){try{if(await this._tilemapCache.fetchAvailability(n,s.row,s.col,e)==="available")break}catch{}if(n--,a++,s=this.identifyPixelLocation(r,a,e.datumTransformation),s===null)return null}return n===-1||s==null?null:a}async _open(t){var S,C;const e=t==null?void 0:t.signal,s=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});s.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const a=s.data;if(this.sourceJSON=a,!a)throw new F("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!a.tileInfo)throw new F("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const i=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=a.cacheType,this.tileType==null&&(i.includes(a.tileInfo.format.toLowerCase())?this.tileType="Map":a.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=((S=a.name)==null?void 0:S.slice(a.name.indexOf("/")+1))??"";const n=await this._fetchRasterInfo({signal:e});if(n==null)throw new F("image-server-raster:open","cannot initialize image service");lt(n,a);const r=this.tileType==="Map"?Wt(a.tileInfo,a):re.fromJSON(a.tileInfo);Le(r);const[l,o]=this._computeMinMaxLOD(n,r),{extent:c,pixelSize:u}=n,f=.5/n.width*u.x,p=Math.max(u.x,u.y),{lods:h}=r;(this.tileType!=="Map"&&a.maxScale!==0||Math.abs(u.x-u.y)>f||!h.some(w=>Math.abs(w.resolution-p)<f))&&(u.x=u.y=l.resolution,n.width=Math.ceil((c.xmax-c.xmin)/u.x-.1),n.height=Math.ceil((c.ymax-c.ymin)/u.y-.1));const y=l.level-o.level,[m,d]=r.size,g=[],x=[];h.forEach((w,M)=>{w.level>=o.level&&w.level<=l.level&&g.push({x:w.resolution,y:w.resolution}),M<h.length-1&&x.push(Math.round(10*w.resolution/h[M+1].resolution)/10)}),g.sort((w,M)=>w.x-M.x);const b=this.computeBlockBoundary(c,m,d,r.origin,g,y),I=g.length>1?g.slice(1):null;let v;a.transposeInfo&&(v={tileSize:[a.transposeInfo.rows,a.transposeInfo.cols],packetSize:((C=n.keyProperties)==null?void 0:C._yxs.PacketSize)??0});const T=x.length<=1||x.length>=3&&x.slice(0,-1).every(w=>w===x[0])?x[0]??2:Math.round(10/(o.resolution/l.resolution)**(-1/y))/10;if(n.storageInfo=new we({blockWidth:r.size[0],blockHeight:r.size[1],pyramidBlockWidth:r.size[0],pyramidBlockHeight:r.size[1],pyramidResolutions:I,pyramidScalingFactor:T,compression:r.format,origin:r.origin,firstPyramidLevel:1,maximumPyramidLevel:y,tileInfo:r,transposeInfo:v,blockBoundary:b}),Vt(n),this._set("rasterInfo",n),a.capabilities.toLowerCase().includes("tilemap")){const w={tileInfo:n.storageInfo.tileInfo,parsedUrl:Je(this.url),url:this.url,tileServers:[]};this._tilemapCache=new Et({layer:w})}}async _fetchRasterInfo(t){const e=this.sourceJSON;if(this.tileType==="Map"){const r=e.fullExtent||e.extent,l=Math.ceil((r.xmax-r.xmin)/e.pixelSizeX-.1),o=Math.ceil((r.ymax-r.ymin)/e.pixelSizeY-.1),c=E.fromJSON(e.spatialReference||r.spatialReference),u=new H({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:c});return new le({width:l,height:o,bandCount:3,extent:U.fromJSON(r),spatialReference:c,pixelSize:u,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:s}=t,a=ct(this.url,this.sourceJSON,{signal:s,query:this.ioConfig.customFetchParameters}),i=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:s}).then(r=>{var l;return(l=r.data)==null?void 0:l.slices}).catch(()=>null):null,n=await Promise.all([a,i]);return this._slices=n[1],n[0]}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_computeMinMaxLOD(t,e){const{pixelSize:s}=t,a=.5/t.width*s.x,{lods:i}=e,n=e.lodAt(Math.max.apply(null,i.map(p=>p.level))),r=e.lodAt(Math.min.apply(null,i.map(p=>p.level))),{tileType:l}=this;if(l==="Map")return this._levelOffset=i[0].level,[n,r];if(l==="Raster")return[i.find(p=>p.resolution===s.x)??n,r];const{minScale:o,maxScale:c}=this.sourceJSON;let u=n;c>0&&(u=i.find(p=>Math.abs(p.scale-c)<a),u||(u=i.filter(p=>p.scale>c).sort((p,h)=>p.scale>h.scale?1:-1)[0]??n));let f=r;return o>0&&(f=i.find(p=>Math.abs(p.scale-o)<a)??r,this._levelOffset=f.level-r.level),[u,f]}};function Wt(t,e){if(!t)return null;const{minScale:s,maxScale:a,minLOD:i,maxLOD:n}=e;if(i!=null&&n!=null)return re.fromJSON({...t,lods:t.lods.filter(({level:r})=>r!=null&&r>=i&&r<=n)});if(s!==0&&a!==0){const r=c=>Math.round(1e4*c)/1e4,l=s?r(s):1/0,o=a?r(a):-1/0;return re.fromJSON({...t,lods:t.lods.filter(c=>{const u=r(c.scale);return u<=l&&u>=o})})}return re.fromJSON(t)}function Vt(t){const{extent:e,spatialReference:s}=t;e.xmin>-1&&e.xmax>181&&(s!=null&&s.wkid)&&s.isGeographic&&(t.nativeExtent=t.extent,t.transform=new $t,t.extent=t.transform.forwardTransform(e))}R([O({type:String,json:{write:!0}})],Q.prototype,"datasetFormat",void 0),R([O()],Q.prototype,"tileType",void 0),Q=R([W("esri.layers.support.rasterDatasets.ImageServerRaster")],Q);const qt=Q,A=new Map;A.set("Int8","s8"),A.set("UInt8","u8"),A.set("Int16","s16"),A.set("UInt16","u16"),A.set("Int32","s32"),A.set("UInt32","u32"),A.set("Float32","f32"),A.set("Float64","f32"),A.set("Double64","f32");const z=new Map;z.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),z.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),z.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),z.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let X=class extends K{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(t,e,s,a={}){const{blockWidth:i,blockHeight:n,blockBoundary:r}=this.rasterInfo.storageInfo,l=r[t];if(!l||l.maxRow<e||l.maxCol<s||l.minRow>e||l.minCol>s)return null;const{bandCount:o,pixelType:c}=this.rasterInfo,{ranges:u,actualTileWidth:f,actualTileHeight:p}=this._getTileLocation(t,e,s);if(!u||u.length===0)return null;if(u[0].from===0&&u[0].to===0){const _=new Uint8Array(i*n);return new ne({width:i,height:n,pixels:void 0,mask:_,validPixelCount:0})}const{bandIds:h}=this.ioConfig,y=this._getBandSegmentCount(),m=[];let d=0;for(d=0;d<y;d++)h&&!h.includes(d)||m.push(this.request(this._files.data,{range:{from:u[d].from,to:u[d].to},responseType:"array-buffer",signal:a.signal}));const g=await Promise.all(m),x=g.map(_=>_.data.byteLength).reduce((_,k)=>_+k),b=new Uint8Array(x),I=[];let v=0;for(d=0;d<y;d++)I.push(v),b.set(new Uint8Array(g[d].data),v),v+=g[d].data.byteLength;const T=z.get(this.rasterInfo.storageInfo.compression).decoderFormat,S=await this.decodePixelBlock(b.buffer,{width:i,height:n,format:T,planes:(h==null?void 0:h.length)||o,offsets:I,pixelType:c});if(S==null)return null;let{noDataValue:C}=this.rasterInfo;if(C!=null&&T!=="lerc"&&!S.mask&&(C=C[0],C!=null)){const _=S.width*S.height,k=new Uint8Array(_);if(Math.abs(C)>1e24)for(d=0;d<_;d++)Math.abs((S.pixels[0][d]-C)/C)>1e-6&&(k[d]=1);else for(d=0;d<_;d++)S.pixels[0][d]!==C&&(k[d]=1);S.mask=k}let w=0,M=0;if(f!==i||p!==n){let _=S.mask;if(_)for(d=0;d<n;d++)if(M=d*i,d<p)for(w=f;w<i;w++)_[M+w]=0;else for(w=0;w<i;w++)_[M+w]=0;else for(_=new Uint8Array(i*n),S.mask=_,d=0;d<p;d++)for(M=d*i,w=0;w<f;w++)_[M+w]=1}return S}async _open(t){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=t?t.signal:null,s=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:a,files:i}=this._parseHeader(s.data),{skipMapInfo:n,skipExtensions:r=[]}=this.ioConfig;if(!r.includes("aux.xml")&&!n){const g=await this._fetchAuxiliaryData(t);g!=null&&(a.statistics=g.statistics??a.statistics,a.histograms=g.histograms,g.histograms&&a.statistics==null&&(a.statistics=xe(g.histograms)))}n&&this.updateImageSpaceRasterInfo(a),this._set("rasterInfo",a),this._files=i;const l=await this.request(i.index,{responseType:"array-buffer",signal:e});this._storageIndex=Yt(l.data);const{blockWidth:o,blockHeight:c}=this.rasterInfo.storageInfo,u=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:f,height:p}=this.rasterInfo,h=[],y=this._getBandSegmentCount();let m=0,d=-1;for(;m<this._storageIndex.length;){d++;const g=Math.ceil(f/o/u**d)-1,x=Math.ceil(p/c/u**d)-1;m+=(g+1)*(x+1)*y*4,h.push({maxRow:x,maxCol:g,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=h,d>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=d),this.updateTileInfo()}_getBandSegmentCount(){return z.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,s){const{blockWidth:a,blockHeight:i,pyramidScalingFactor:n}=this.rasterInfo.storageInfo,{width:r,height:l}=this.rasterInfo,o=this._getBandSegmentCount();let c,u,f,p=0,h=0;for(f=0;f<t;f++)h=n**f,c=Math.ceil(r/a/h),u=Math.ceil(l/i/h),p+=c*u;h=n**t,c=Math.ceil(r/a/h),u=Math.ceil(l/i/h),p+=e*c+s,p*=4*o;const y=this._storageIndex.subarray(p,p+4*o);let m=0,d=0;const g=[];for(let x=0;x<o;x++)m=y[4*x]*2**32+y[4*x+1],d=m+y[4*x+2]*2**32+y[4*x+3],g.push({from:m,to:d});return{ranges:g,actualTileWidth:s<c-1?a:Math.ceil(r/h)-a*(c-1),actualTileHeight:e<u-1?i:Math.ceil(l/h)-i*(u-1)}}_parseHeader(t){const e=L(t,"MRF_META/Raster");if(!e)throw new F("mrf:open","not a valid MRF format");const s=L(e,"Size"),a=parseInt(s.getAttribute("x"),10),i=parseInt(s.getAttribute("y"),10),n=parseInt(s.getAttribute("c"),10),r=(J(e,"Compression")||"none").toLowerCase();if(!z.has(r))throw new F("mrf:open","currently does not support compression "+r);const l=J(e,"DataType")||"UInt8",o=A.get(l);if(o==null)throw new F("mrf:open","currently does not support pixel type "+l);const c=L(e,"PageSize"),u=parseInt(c.getAttribute("x"),10),f=parseInt(c.getAttribute("y"),10),p=L(e,"DataValues");let h,y;if(p&&(y=p.getAttribute("NoData"),y!=null&&(h=y.trim().split(" ").map(_=>parseFloat(_)))),L(t,"MRF_META/CachedSource"))throw new F("mrf:open","currently does not support MRF referencing other data files");const m=L(t,"MRF_META/GeoTags"),d=L(m,"BoundingBox");let g,x=!1;if(d!=null){const _=parseFloat(d.getAttribute("minx")),k=parseFloat(d.getAttribute("miny")),V=parseFloat(d.getAttribute("maxx")),P=parseFloat(d.getAttribute("maxy")),B=J(m,"Projection")||"";let D=E.WGS84;if(B!=="LOCAL_CS[]")if(B.toLowerCase().startsWith("epsg:")){const q=Number(B.slice(5));isNaN(q)||q===0||(D=new E({wkid:q}))}else D=ce(B)??E.WGS84;else x=!0,D=new E({wkid:3857});g=new U(_,k,V,P),g.spatialReference=D}else x=!0,g=new U({xmin:-.5,ymin:.5-i,xmax:a-.5,ymax:.5,spatialReference:new E({wkid:3857})});const b=L(t,"MRF_META/Rsets"),I=parseInt((b==null?void 0:b.getAttribute("scale"))||"2",10),v=g.spatialReference,T=new we({origin:new H({x:g.xmin,y:g.ymax,spatialReference:v}),blockWidth:u,blockHeight:f,pyramidBlockWidth:u,pyramidBlockHeight:f,compression:r,pyramidScalingFactor:I}),S=new H({x:g.width/a,y:g.height/i,spatialReference:v}),C=new le({width:a,height:i,extent:g,isPseudoSpatialReference:x,spatialReference:v,bandCount:n,pixelType:o,pixelSize:S,noDataValue:h,storageInfo:T}),w=J(t,"datafile"),M=J(t,"IndexFile");return{rasterInfo:C,files:{mrf:this.url,index:M||this.url.replace(".mrf",".idx"),data:w||this.url.replace(".mrf",z.get(r).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t==null?void 0:t.signal});return ve(e)}catch{return null}}};function Yt(t){if(t.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,s,a,i,n,r;if(_t){for(s=new Uint8Array(t),i=new ArrayBuffer(t.byteLength),a=new Uint8Array(i),n=0;n<t.byteLength/4;n++)for(r=0;r<4;r++)a[4*n+r]=s[4*n+3-r];e=new Uint32Array(i)}else e=new Uint32Array(t);return e}R([O()],X.prototype,"_files",void 0),R([O()],X.prototype,"_storageIndex",void 0),R([O({type:String,json:{write:!0}})],X.prototype,"datasetFormat",void 0),X=R([W("esri.layers.support.rasterDatasets.MRFRaster")],X);const Xt=X;function Kt(t){const e=t.fields,s=t.records,a=e.some(c=>c.name.toLowerCase()==="oid")?"OBJECTID":"OID",i=[{name:a,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(c=>({name:c.name,type:"esriFieldType"+c.typeName,alias:c.name}))),n=i.map(c=>c.name),r=[];let l=0,o=0;return s.forEach(c=>{const u={};for(u[a]=l++,o=1;o<n.length;o++)u[n[o]]=c[o-1];r.push({attributes:u})}),{displayFieldName:"",fields:i,features:r}}class Zt{static get supportedVersions(){return[5]}static parse(e){const s=new DataView(e),a=3&s.getUint8(0);if(a!==3)return{header:{version:a},recordSet:null};const i=s.getUint32(4,!0),n=s.getUint16(8,!0),r=s.getUint16(10,!0),l={version:a,recordCount:i,headerByteCount:n,recordByteCount:r};let o=32;const c=[],u=[];let f;if(a===3){for(;s.getUint8(o)!==13;)f=String.fromCharCode(s.getUint8(o+11)).trim(),c.push({name:Te(new Uint8Array(e,o,11)),type:f,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(f)],length:s.getUint8(o+16)}),o+=32;if(o+=1,c.length>0)for(;u.length<i&&e.byteLength-o>r;){const p=[];s.getUint8(o)===32?(o+=1,c.forEach(h=>{if(h.type==="C")p.push(Te(new Uint8Array(e,o,h.length)).trim());else if(h.type==="N")p.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,h.length)).trim(),10));else if(h.type==="F")p.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,h.length)).trim()));else if(h.type==="D"){const y=String.fromCharCode.apply(null,new Uint8Array(e,o,h.length)).trim();p.push(new Date(parseInt(y.slice(0,4),10),parseInt(y.slice(4,6),10)-1,parseInt(y.slice(6,8),10)))}o+=h.length}),u.push(p)):o+=r}}return{header:l,fields:c,records:u,recordSet:Kt({fields:c,records:u})}}}const ye=(t,e)=>{var s;return(s=t.get(e))==null?void 0:s.values},ee=(t,e)=>{var s,a;return(a=(s=t.get(e))==null?void 0:s.values)==null?void 0:a[0]};let j=class extends K{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async fetchRawTile(t,e,s,a={}){var n;if(!((n=this._headerInfo)!=null&&n.isSupported)||this.isBlockOutside(t,e,s))return null;const i=await this._fetchRawTiffTile(t,e,s,!1,a);if(i!=null&&this._headerInfo.hasMaskBand){const r=await this._fetchRawTiffTile(t,e,s,!0,a);r!=null&&r.pixels[0]instanceof Uint8Array&&(i.mask=r.pixels[0])}return i}async _open(t){var m,d,g,x;const e=t?t.signal:null,{data:s}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!s)throw new F("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:a,firstIFDPos:i,isBigTiff:n}=Ot(s),r=[];await this._readIFDs(r,s,a,i,0,n?8:4,e);const{imageInfo:l,rasterInfo:o}=Qt(r),c=Ft(r),u=Ct(r);if(this._headerInfo={littleEndian:a,isBigTiff:n,ifds:r,pyramidIFDs:c,maskIFDs:u,...l},this._set("rasterInfo",o),!l.isSupported)throw new F("tiffraster:open","this tiff is not supported: "+l.message);if(!l.tileWidth)throw new F("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");o.isPseudoSpatialReference&&ge.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const f=(d=(m=r[0].get("PREDICTOR"))==null?void 0:m.values)==null?void 0:d[0];if(((x=(g=r[0].get("SAMPLEFORMAT"))==null?void 0:g.values)==null?void 0:x[0])===3&&f===2)throw new F("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:h,skipExtensions:y=[]}=this.ioConfig;if(!y.includes("aux.xml")&&!h){const b=await this._fetchAuxiliaryMetaData(t);b!=null&&es(b,o)}y.includes("vat.dbf")||o.bandCount!==1||o.pixelType!=="u8"||h||(o.attributeTable=await this._fetchAuxiliaryTable(t),o.attributeTable!=null&&(o.keyProperties.DataType="thematic")),h&&this.updateImageSpaceRasterInfo(o),this.updateTileInfo()}async _readIFDs(t,e,s,a,i,n=4,r){if(!a)return null;(a>=e.byteLength||a<0)&&(e=(await this.request(this.url,{range:{from:a+i,to:a+i+this._bufferSize},responseType:"array-buffer",signal:r})).data,i=a+i,a=0);const l=await this._readIFD(e,s,a,i,ae.tiffTags,n,r);if(t.push(l.ifd),!l.nextIFD)return null;await this._readIFDs(t,e,s,l.nextIFD-i,i,n,r)}async _readIFD(t,e,s,a,i=ae.tiffTags,n=4,r){var o,c;if(!t)return null;const l=Mt(t,e,s,a,i,n);if(l.success){const u=[];if((o=l.ifd)==null||o.forEach(f=>{f.values||u.push(f)}),u.length>0){const f=u.map(h=>h.offlineOffsetSize).filter(me),p=Math.min.apply(null,f.map(h=>h[0]));if(Math.min.apply(null,f.map(h=>h[0]+h[1]))-p<=this._bufferSize){const{data:h}=await this.request(this.url,{range:{from:p,to:p+this._bufferSize},responseType:"array-buffer",signal:r});t=h,a=p,u.forEach(y=>kt(t,e,y,a))}}if((c=l.ifd)!=null&&c.has("GEOKEYDIRECTORY")){const f=l.ifd.get("GEOKEYDIRECTORY"),p=f==null?void 0:f.values;if(p&&p.length>4){const h=p[0]+"."+p[1]+"."+p[2],y=await this._readIFD(t,e,f.valueOffset+6-a,a,ae.geoKeys,2,r);f.data=y.ifd,f.data&&f.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[h]})}}return l}if(l.requiredBufferSize&&l.requiredBufferSize!==t.byteLength)return(t=(await this.request(this.url,{range:{from:a,to:a+l.requiredBufferSize+4},responseType:"array-buffer",signal:r})).data).byteLength<l.requiredBufferSize?null:this._readIFD(t,e,0,a,ae.tiffTags,4,r)}async _fetchRawTiffTile(t,e,s,a,i={}){const n=this._getTileLocation(t,e,s,a);if(!n)return null;const{ranges:r,actualTileWidth:l,actualTileHeight:o,ifd:c}=n,u=r.map(T=>this.request(this.url,{range:T,responseType:"array-buffer",signal:i.signal})),f=await Promise.all(u),p=f.map(T=>T.data.byteLength).reduce((T,S)=>T+S),h=f.length===1?f[0].data:new ArrayBuffer(p),y=[0],m=[0];if(f.length>1){const T=new Uint8Array(h);for(let S=0,C=0;S<f.length;S++){const w=f[S].data;T.set(new Uint8Array(w),C),y[S]=C,C+=w.byteLength,m[S]=w.byteLength}}const{blockWidth:d,blockHeight:g}=this.getBlockWidthHeight(t),x=await this.decodePixelBlock(h,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:y,sizes:m},width:d,height:g,planes:null,pixelType:null});if(x==null)return null;let b,I,v;if(l!==d||o!==g){let T=x.mask;if(T)for(b=0;b<g;b++)if(v=b*d,b<o)for(I=l;I<d;I++)T[v+I]=0;else for(I=0;I<d;I++)T[v+I]=0;else for(T=new Uint8Array(d*g),x.mask=T,b=0;b<o;b++)for(v=b*d,I=0;I<l;I++)T[v+I]=1}return x}_getTileLocation(t,e,s,a=!1){const{firstPyramidLevel:i,blockBoundary:n}=this.rasterInfo.storageInfo,r=t===0?0:t-(i-1),{_headerInfo:l}=this;if(!l)return null;const o=a?l.maskIFDs[r]:r===0?l==null?void 0:l.ifds[0]:l==null?void 0:l.pyramidIFDs[r-1];if(!o)return null;const c=Pt(o,l),u=ye(o,"TILEOFFSETS");if(u===void 0)return null;const f=ye(o,"TILEBYTECOUNTS"),{minRow:p,minCol:h,maxRow:y,maxCol:m}=n[r];if(e>y||s>m||e<p||s<h)return null;const d=ee(o,"IMAGEWIDTH"),g=ee(o,"IMAGELENGTH"),x=ee(o,"TILEWIDTH"),b=ee(o,"TILELENGTH"),I=[];if(c){const{bandCount:v}=this.rasterInfo;for(let T=0;T<v;T++){const S=T*(y+1)*(m+1)+e*(m+1)+s;I[T]={from:u[S],to:u[S]+f[S]-1}}}else{const v=e*(m+1)+s;I.push({from:u[v],to:u[v]+f[v]-1})}for(let v=0;v<I.length;v++)if(I[v].from==null||!I[v].to||I[v].to<0)return null;return{ranges:I,ifd:o,actualTileWidth:s===m&&d%x||x,actualTileHeight:e===y&&g%b||b}}async _fetchAuxiliaryMetaData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t==null?void 0:t.signal});return ve(e)}catch{return null}}async _fetchAuxiliaryTable(t){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:t==null?void 0:t.signal}),s=Zt.parse(e);return s!=null&&s.recordSet?Oe.fromJSON(s.recordSet):null}catch{return null}}};function Qt(t){var V,P;const e=Nt(t),{width:s,height:a,tileWidth:i,tileHeight:n,planes:r,pixelType:l,compression:o,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidBlockWidth:f,pyramidBlockHeight:p,pyramidResolutions:h,tileBoundary:y,affine:m,metadata:d}=e,g=((V=e.extent.spatialReference)==null?void 0:V.wkt)||((P=e.extent.spatialReference)==null?void 0:P.wkid);let x=ce(g),b=!!e.isPseudoGeographic;x==null&&(b=!0,x=new E({wkid:3857}));const I=new U({...e.extent,spatialReference:x}),v=new H(I?{x:I.xmin,y:I.ymax,spatialReference:x}:{x:0,y:0}),T=new we({blockWidth:i,blockHeight:n,pyramidBlockWidth:f,pyramidBlockHeight:p,compression:o,origin:v,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidResolutions:h,blockBoundary:y}),S=new H({x:(I.xmax-I.xmin)/s,y:(I.ymax-I.ymin)/a,spatialReference:x}),C=d?{BandProperties:d.bandProperties,DataType:d.dataType}:{};let w=null;const M=ee(t[0],"PHOTOMETRICINTERPRETATION"),_=ye(t[0],"COLORMAP");if(M<=3&&(_==null?void 0:_.length)>3&&_.length%3==0){w=[];const B=_.length/3;for(let D=0;D<B;D++)w.push([D,_[D]>>>8,_[D+B]>>>8,_[D+2*B]>>>8])}const k=new le({width:s,height:a,bandCount:r,pixelType:l,pixelSize:S,storageInfo:T,spatialReference:x,isPseudoSpatialReference:b,keyProperties:C,extent:I,colormap:w,statistics:d?d.statistics:null});if(m!=null&&m.length&&(k.nativeExtent=new U({xmin:-.5,ymin:.5-a,xmax:s-.5,ymax:.5,spatialReference:x}),k.transform=new Ie({polynomialOrder:1,forwardCoefficients:[m[2]+m[0]/2,m[5]-m[3]/2,m[0],m[3],-m[1],-m[4]]}),k.extent=k.transform.forwardTransform(k.nativeExtent),k.pixelSize=new H({x:(I.xmax-I.xmin)/s,y:(I.ymax-I.ymin)/a,spatialReference:x}),T.origin.x=-.5,T.origin.y=.5),h){const{x:B,y:D}=k.pixelSize;h.forEach(q=>{q.x*=B,q.y*=D})}return{imageInfo:e,rasterInfo:k}}function es(t,e){if(e.statistics=t.statistics??e.statistics,e.histograms=t.histograms,t.histograms&&e.statistics==null&&(e.statistics=xe(t.histograms)),t.transform&&e.transform==null){e.transform=t.transform,e.nativeExtent=e.extent;const s=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new H({x:(s.xmax-s.xmin)/e.width,y:(s.ymax-s.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=s}e.isPseudoSpatialReference&&t.spatialReference&&(e.spatialReference=t.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}R([O()],j.prototype,"_files",void 0),R([O()],j.prototype,"_headerInfo",void 0),R([O()],j.prototype,"_bufferSize",void 0),R([O({type:String,json:{write:!0}})],j.prototype,"datasetFormat",void 0),j=R([W("esri.layers.support.rasterDatasets.TIFFRaster")],j);const ts=j,$=new Map;$.set("MRF",{desc:"Meta Raster Format",constructor:Xt}),$.set("TIFF",{desc:"GeoTIFF",constructor:ts}),$.set("RasterTileServer",{desc:"Raster Tile Server",constructor:qt}),$.set("JPG",{desc:"JPG Raster Format",constructor:ie}),$.set("PNG",{desc:"PNG Raster Format",constructor:ie}),$.set("GIF",{desc:"GIF Raster Format",constructor:ie}),$.set("BMP",{desc:"BMP Raster Format",constructor:ie}),$.set("CovJSON",{desc:"COVJSON Raster Format",constructor:jt}),$.set("MEMORY",{desc:"In Memory Raster Format",constructor:be});class de{static get supportedFormats(){const e=new Set;return $.forEach((s,a)=>e.add(a)),e}static async open(e){var f;const{url:s,ioConfig:a,source:i,sourceJSON:n}=e;let r=e.datasetFormat??(a==null?void 0:a.datasetFormat);r==null&&(s.includes(".")?r=s.slice(s.lastIndexOf(".")+1).toUpperCase():((f=i==null?void 0:i.type)==null?void 0:f.toLowerCase())==="coverage"?r="CovJSON":i!=null&&i.extent&&i.pixelblocks&&(r="MEMORY")),r==="OVR"||r==="TIF"?r="TIFF":r==="JPG"||r==="JPEG"||r==="JFIF"?r="JPG":r==="COVJSON"&&(r="CovJSON"),s.toLowerCase().includes("/imageserver")&&!s.toLowerCase().includes("/wcsserver")&&(r="RasterTileServer");const l={url:s,source:i,sourceJSON:n,datasetFormat:r,ioConfig:a??{bandIds:null,sampling:null}};if(Object.keys(l).forEach(p=>{l[p]==null&&delete l[p]}),r){if(!this.supportedFormats.has(r))throw new F("rasterfactory:open","not a supported format "+r);if(r==="CRF")throw new F("rasterfactory:open",`cannot open raster: ${s}`);const p=new($.get(r)).constructor(l);return await p.open({signal:e.signal}),p}const o=Array.from($.keys()).filter(p=>p!=="CovJSON"&&p!=="Memory");let c=0;const u=()=>{if(r=o[c++],!r||r==="CRF")return null;const p=new($.get(r)).constructor(l);return p.open({signal:e.signal}).then(()=>p).catch(()=>u())};return u()}static register(e,s,a){$.has(e.toUpperCase())||$.set(e.toUpperCase(),{desc:s,constructor:a})}}let N=class extends ze(Ue(je(Ge(ut(He(nt(We(Ve(qe(Ye(Xe.ClonableMixin(Ke)))))))))))){constructor(...t){super(...t),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=Ze(async(e,s,a)=>{const{save:i,saveAs:n}=await at(()=>import("./imageryUtils-DSsbcHlJ.js"),__vite__mapDeps([0,1,2,3]));switch(e){case te.SAVE:return i(this,s);case te.SAVE_AS:return n(this,a,s)}})}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(Qe).then(()=>this._openRaster(e))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){var n,r;const t=[ht("Pixel Value"),ft("Raw Pixel Value")],e=((n=this.raster)==null?void 0:n.rasterInfo)??this.serviceRasterInfo,s=e==null?void 0:e.attributeTable;if(s){const l=pt(s);t.push(...l)}const a=e==null?void 0:e.dataType,i=e==null?void 0:e.multidimensionalInfo;if((a==="vector-magdir"||a==="vector-uv")&&i!=null){const l=(r=i.variables[0].unit)==null?void 0:r.trim(),o=dt(l),c=mt();t.push(o,c)}if(i){const l=gt(i);t.push(...l)}return t}createPopupTemplate(t){const{rasterFields:e}=this,s=(t==null?void 0:t.visibleFieldNames)??new Set(e.map(({name:n})=>n).filter(n=>n!==yt.rawServicePixelValue)),a=et({fields:e,title:this.title},{...t,visibleFieldNames:s}),{rasterInfo:i}=this.raster;return a!=null&&a.fieldInfos&&i&&xt(a.fieldInfos,i),a}async generateRasterInfo(t,e){var s;if(t=tt(Ce,t),await this.load(),!t||((s=t.functionName)==null?void 0:s.toLowerCase())==="none")return this.serviceRasterInfo;try{const{rasterInfo:a}=await this._openFunctionRaster(t,e);return a}catch(a){throw a instanceof F?a:new F("imagery-tile-layer","the given raster function is not supported")}}async save(t){return this._debouncedSaveOperations(te.SAVE,t)}async saveAs(t,e){return this._debouncedSaveOperations(te.SAVE_AS,e,t)}write(t,e){const s=this._primaryRasters[0]??this.raster;if(this.loaded?s.datasetFormat==="RasterTileServer"&&(s.tileType==="Raster"||s.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(t,e);if(e!=null&&e.messages){const a=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new F("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${a}'`,{layer:this}))}return null}async _openRaster(t){var a;let e=!1;if(this.raster)await this._openFromRaster(this.raster,t),e=this.raster.datasetFormat==="Function",!e&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:i,rasterFunction:n,source:r}=this;if(!i&&!r)throw new F("imagery-tile-layer:open","missing url or source parameter");r?await this._openFromSource(r,t):n?await this._openFromUrlWithRasterFunction(i,n,t):await this._openFromUrl(i,t)}const s=this.raster.rasterInfo;if(!s)throw new F("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?s:this._primaryRasters[0].rasterInfo),this._set("spatialReference",s.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const i=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(i,{origin:"service"})}else this.read({tileInfo:(a=this.serviceRasterInfo)==null?void 0:a.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(st(()=>this.customParameters,i=>{this.raster&&(this.raster.ioConfig.customFetchParameters=i)}))}async _openFromRaster(t,e){t.rasterInfo||await t.open({signal:e}),this._primaryRasters=t.datasetFormat==="Function"?t.primaryRasters.rasters:[t],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(t,e,s){const a=[t];e&&Bt(e.toJSON(),a);const i=await Promise.all(a.map(r=>de.open({url:r,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:s}))),n=i.findIndex(r=>r==null);if(n>-1)throw new F("imagery-tile-layer:open",`cannot open raster: ${a[n]}`);return this._primaryRasters=i,this._initializeWithFunctionRaster(e)}async _openFromUrl(t,e){const s=await de.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(s==null)throw new F("imagery-tile-layer:open",`cannot open raster: ${t}`);this._primaryRasters=[s],this.raster=s}async _openFromSource(t,e){var n;const s="the tiled imagery data source is not supported",a=((n=t.type)==null?void 0:n.toLowerCase())==="coverage"?"CovJSON":t.extent&&t.pixelBlock?"MEMORY":null;if(!a)throw new F("imagery-tile-layer:open",s);a==="MEMORY"&&(t={...t,pixelBlock:void 0,pixelBlocks:[t.pixelBlock]});const i=await de.open({url:"",source:t,datasetFormat:a,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(i==null)throw new F("imagery-tile-layer:open",s);this._primaryRasters=[i],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=i}async _openFunctionRaster(t,e){var n;const s={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(r=>s[r.url]=r);const a=Dt(((n=t.functionDefinition)==null?void 0:n.toJSON())??t.toJSON(),s),i=new ot({rasterFunction:a});return await i.open(e),i}async _initializeWithFunctionRaster(t,e){try{this.raster=await this._openFunctionRaster(t,e)}catch(s){s instanceof F&&ge.getLogger(this).error("imagery-tile-layer:open",s.message),ge.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};R([O({clonable:!1})],N.prototype,"_primaryRasters",void 0),R([O(it)],N.prototype,"legendEnabled",void 0),R([O({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],N.prototype,"isReference",void 0),R([O({type:["show","hide"]})],N.prototype,"listMode",void 0),R([O({json:{read:!0,write:!0}})],N.prototype,"blendMode",void 0),R([O({type:Ce,json:{name:"renderingRule",write:!0}})],N.prototype,"rasterFunction",void 0),R([O()],N.prototype,"sourceJSON",void 0),R([O({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],N.prototype,"version",void 0),R([O({readOnly:!0,json:{read:!1}})],N.prototype,"type",void 0),R([O({type:["ArcGISTiledImageServiceLayer"]})],N.prototype,"operationalLayerType",void 0),R([O({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(t,e,s){e[s]=!t}}}})],N.prototype,"popupEnabled",void 0),R([O({type:rt,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],N.prototype,"popupTemplate",void 0),R([O({readOnly:!0})],N.prototype,"defaultPopupTemplate",null),R([O({readOnly:!0,type:[Se]})],N.prototype,"fields",void 0),R([O({readOnly:!0,type:[Se]})],N.prototype,"rasterFields",null),R([O({constructOnly:!0})],N.prototype,"source",void 0),N=R([W("esri.layers.ImageryTileLayer")],N);const gs=N;export{gs as default};
